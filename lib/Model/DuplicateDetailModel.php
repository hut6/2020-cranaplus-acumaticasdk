<?php
/**
 * DuplicateDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;

use \ArrayAccess;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * DuplicateDetailModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DuplicateDetailModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DuplicateDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'rowNumber' => 'int',
        'note' => 'string',
        'custom' => 'map[string,map[string,\Hut6\CranaplusAcumaticaSdk\Model\CustomFieldModel]]',
        'files' => '\Hut6\CranaplusAcumaticaSdk\Model\FileLinkModel[]',
        'accountName' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'businessAccount' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'businessAccountType' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'contactID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'displayName' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'duplicate' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'duplicateContactID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'email' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'entityType' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'lastModifiedDate' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'type' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'rowNumber' => 'int64',
        'note' => null,
        'custom' => null,
        'files' => null,
        'accountName' => null,
        'businessAccount' => null,
        'businessAccountType' => null,
        'contactID' => null,
        'displayName' => null,
        'duplicate' => null,
        'duplicateContactID' => null,
        'email' => null,
        'entityType' => null,
        'lastModifiedDate' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'rowNumber' => 'rowNumber',
        'note' => 'note',
        'custom' => 'custom',
        'files' => 'files',
        'accountName' => 'AccountName',
        'businessAccount' => 'BusinessAccount',
        'businessAccountType' => 'BusinessAccountType',
        'contactID' => 'ContactID',
        'displayName' => 'DisplayName',
        'duplicate' => 'Duplicate',
        'duplicateContactID' => 'DuplicateContactID',
        'email' => 'Email',
        'entityType' => 'EntityType',
        'lastModifiedDate' => 'LastModifiedDate',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'rowNumber' => 'setRowNumber',
        'note' => 'setNote',
        'custom' => 'setCustom',
        'files' => 'setFiles',
        'accountName' => 'setAccountName',
        'businessAccount' => 'setBusinessAccount',
        'businessAccountType' => 'setBusinessAccountType',
        'contactID' => 'setContactID',
        'displayName' => 'setDisplayName',
        'duplicate' => 'setDuplicate',
        'duplicateContactID' => 'setDuplicateContactID',
        'email' => 'setEmail',
        'entityType' => 'setEntityType',
        'lastModifiedDate' => 'setLastModifiedDate',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'rowNumber' => 'getRowNumber',
        'note' => 'getNote',
        'custom' => 'getCustom',
        'files' => 'getFiles',
        'accountName' => 'getAccountName',
        'businessAccount' => 'getBusinessAccount',
        'businessAccountType' => 'getBusinessAccountType',
        'contactID' => 'getContactID',
        'displayName' => 'getDisplayName',
        'duplicate' => 'getDuplicate',
        'duplicateContactID' => 'getDuplicateContactID',
        'email' => 'getEmail',
        'entityType' => 'getEntityType',
        'lastModifiedDate' => 'getLastModifiedDate',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['rowNumber'] = isset($data['rowNumber']) ? $data['rowNumber'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['custom'] = isset($data['custom']) ? $data['custom'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['accountName'] = isset($data['accountName']) ? $data['accountName'] : null;
        $this->container['businessAccount'] = isset($data['businessAccount']) ? $data['businessAccount'] : null;
        $this->container['businessAccountType'] = isset($data['businessAccountType']) ? $data['businessAccountType'] : null;
        $this->container['contactID'] = isset($data['contactID']) ? $data['contactID'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['duplicate'] = isset($data['duplicate']) ? $data['duplicate'] : null;
        $this->container['duplicateContactID'] = isset($data['duplicateContactID']) ? $data['duplicateContactID'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['lastModifiedDate'] = isset($data['lastModifiedDate']) ? $data['lastModifiedDate'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets rowNumber
     *
     * @return int
     */
    public function getRowNumber()
    {
        return $this->container['rowNumber'];
    }

    /**
     * Sets rowNumber
     *
     * @param int $rowNumber rowNumber
     *
     * @return $this
     */
    public function setRowNumber($rowNumber)
    {
        $this->container['rowNumber'] = $rowNumber;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return map[string,map[string,\Hut6\CranaplusAcumaticaSdk\Model\CustomFieldModel]]
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param map[string,map[string,\Hut6\CranaplusAcumaticaSdk\Model\CustomFieldModel]] $custom custom
     *
     * @return $this
     */
    public function setCustom($custom)
    {
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\FileLinkModel[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\FileLinkModel[] $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountName accountName
     *
     * @return $this
     */
    public function setAccountName($accountName)
    {
        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets businessAccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getBusinessAccount()
    {
        return $this->container['businessAccount'];
    }

    /**
     * Sets businessAccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $businessAccount businessAccount
     *
     * @return $this
     */
    public function setBusinessAccount($businessAccount)
    {
        $this->container['businessAccount'] = $businessAccount;

        return $this;
    }

    /**
     * Gets businessAccountType
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getBusinessAccountType()
    {
        return $this->container['businessAccountType'];
    }

    /**
     * Sets businessAccountType
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $businessAccountType businessAccountType
     *
     * @return $this
     */
    public function setBusinessAccountType($businessAccountType)
    {
        $this->container['businessAccountType'] = $businessAccountType;

        return $this;
    }

    /**
     * Gets contactID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getContactID()
    {
        return $this->container['contactID'];
    }

    /**
     * Sets contactID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $contactID contactID
     *
     * @return $this
     */
    public function setContactID($contactID)
    {
        $this->container['contactID'] = $contactID;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets duplicate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getDuplicate()
    {
        return $this->container['duplicate'];
    }

    /**
     * Sets duplicate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $duplicate duplicate
     *
     * @return $this
     */
    public function setDuplicate($duplicate)
    {
        $this->container['duplicate'] = $duplicate;

        return $this;
    }

    /**
     * Gets duplicateContactID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getDuplicateContactID()
    {
        return $this->container['duplicateContactID'];
    }

    /**
     * Sets duplicateContactID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $duplicateContactID duplicateContactID
     *
     * @return $this
     */
    public function setDuplicateContactID($duplicateContactID)
    {
        $this->container['duplicateContactID'] = $duplicateContactID;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $entityType entityType
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $lastModifiedDate lastModifiedDate
     *
     * @return $this
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


