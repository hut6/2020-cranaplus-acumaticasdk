<?php
/**
 * BusinessAccountMarketingListDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * BusinessAccountMarketingListDetailModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessAccountMarketingListDetailModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BusinessAccountMarketingListDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contactID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'dynamicList' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'email' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'format' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'listName' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'marketingListID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'memberName' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'phone1' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'subscribed' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contactID' => null,
        'dynamicList' => null,
        'email' => null,
        'format' => null,
        'listName' => null,
        'marketingListID' => null,
        'memberName' => null,
        'phone1' => null,
        'subscribed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contactID' => 'ContactID',
        'dynamicList' => 'DynamicList',
        'email' => 'Email',
        'format' => 'Format',
        'listName' => 'ListName',
        'marketingListID' => 'MarketingListID',
        'memberName' => 'MemberName',
        'phone1' => 'Phone1',
        'subscribed' => 'Subscribed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contactID' => 'setContactID',
        'dynamicList' => 'setDynamicList',
        'email' => 'setEmail',
        'format' => 'setFormat',
        'listName' => 'setListName',
        'marketingListID' => 'setMarketingListID',
        'memberName' => 'setMemberName',
        'phone1' => 'setPhone1',
        'subscribed' => 'setSubscribed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contactID' => 'getContactID',
        'dynamicList' => 'getDynamicList',
        'email' => 'getEmail',
        'format' => 'getFormat',
        'listName' => 'getListName',
        'marketingListID' => 'getMarketingListID',
        'memberName' => 'getMemberName',
        'phone1' => 'getPhone1',
        'subscribed' => 'getSubscribed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['contactID'] = isset($data['contactID']) ? $data['contactID'] : null;
        $this->container['dynamicList'] = isset($data['dynamicList']) ? $data['dynamicList'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['listName'] = isset($data['listName']) ? $data['listName'] : null;
        $this->container['marketingListID'] = isset($data['marketingListID']) ? $data['marketingListID'] : null;
        $this->container['memberName'] = isset($data['memberName']) ? $data['memberName'] : null;
        $this->container['phone1'] = isset($data['phone1']) ? $data['phone1'] : null;
        $this->container['subscribed'] = isset($data['subscribed']) ? $data['subscribed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contactID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getContactID()
    {
        return $this->container['contactID'];
    }

    /**
     * Sets contactID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $contactID contactID
     *
     * @return $this
     */
    public function setContactID($contactID)
    {
        $this->container['contactID'] = $contactID;

        return $this;
    }

    /**
     * Gets dynamicList
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getDynamicList()
    {
        return $this->container['dynamicList'];
    }

    /**
     * Sets dynamicList
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $dynamicList dynamicList
     *
     * @return $this
     */
    public function setDynamicList($dynamicList)
    {
        $this->container['dynamicList'] = $dynamicList;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets format
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $format format
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets listName
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getListName()
    {
        return $this->container['listName'];
    }

    /**
     * Sets listName
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $listName listName
     *
     * @return $this
     */
    public function setListName($listName)
    {
        $this->container['listName'] = $listName;

        return $this;
    }

    /**
     * Gets marketingListID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getMarketingListID()
    {
        return $this->container['marketingListID'];
    }

    /**
     * Sets marketingListID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $marketingListID marketingListID
     *
     * @return $this
     */
    public function setMarketingListID($marketingListID)
    {
        $this->container['marketingListID'] = $marketingListID;

        return $this;
    }

    /**
     * Gets memberName
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getMemberName()
    {
        return $this->container['memberName'];
    }

    /**
     * Sets memberName
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $memberName memberName
     *
     * @return $this
     */
    public function setMemberName($memberName)
    {
        $this->container['memberName'] = $memberName;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $phone1 phone1
     *
     * @return $this
     */
    public function setPhone1($phone1)
    {
        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets subscribed
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getSubscribed()
    {
        return $this->container['subscribed'];
    }

    /**
     * Sets subscribed
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $subscribed subscribed
     *
     * @return $this
     */
    public function setSubscribed($subscribed)
    {
        $this->container['subscribed'] = $subscribed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


