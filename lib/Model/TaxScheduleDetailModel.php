<?php
/**
 * TaxScheduleDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * TaxScheduleDetailModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxScheduleDetailModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaxScheduleDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deductibleTaxRate' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'maxTaxableAmount' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'minTaxableAmount' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'reportingGroup' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'revisionID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'startDate' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'taxID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'taxRate' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deductibleTaxRate' => null,
        'maxTaxableAmount' => null,
        'minTaxableAmount' => null,
        'reportingGroup' => null,
        'revisionID' => null,
        'startDate' => null,
        'taxID' => null,
        'taxRate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deductibleTaxRate' => 'DeductibleTaxRate',
        'maxTaxableAmount' => 'MaxTaxableAmount',
        'minTaxableAmount' => 'MinTaxableAmount',
        'reportingGroup' => 'ReportingGroup',
        'revisionID' => 'RevisionID',
        'startDate' => 'StartDate',
        'taxID' => 'TaxID',
        'taxRate' => 'TaxRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deductibleTaxRate' => 'setDeductibleTaxRate',
        'maxTaxableAmount' => 'setMaxTaxableAmount',
        'minTaxableAmount' => 'setMinTaxableAmount',
        'reportingGroup' => 'setReportingGroup',
        'revisionID' => 'setRevisionID',
        'startDate' => 'setStartDate',
        'taxID' => 'setTaxID',
        'taxRate' => 'setTaxRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deductibleTaxRate' => 'getDeductibleTaxRate',
        'maxTaxableAmount' => 'getMaxTaxableAmount',
        'minTaxableAmount' => 'getMinTaxableAmount',
        'reportingGroup' => 'getReportingGroup',
        'revisionID' => 'getRevisionID',
        'startDate' => 'getStartDate',
        'taxID' => 'getTaxID',
        'taxRate' => 'getTaxRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['deductibleTaxRate'] = isset($data['deductibleTaxRate']) ? $data['deductibleTaxRate'] : null;
        $this->container['maxTaxableAmount'] = isset($data['maxTaxableAmount']) ? $data['maxTaxableAmount'] : null;
        $this->container['minTaxableAmount'] = isset($data['minTaxableAmount']) ? $data['minTaxableAmount'] : null;
        $this->container['reportingGroup'] = isset($data['reportingGroup']) ? $data['reportingGroup'] : null;
        $this->container['revisionID'] = isset($data['revisionID']) ? $data['revisionID'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['taxID'] = isset($data['taxID']) ? $data['taxID'] : null;
        $this->container['taxRate'] = isset($data['taxRate']) ? $data['taxRate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deductibleTaxRate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getDeductibleTaxRate()
    {
        return $this->container['deductibleTaxRate'];
    }

    /**
     * Sets deductibleTaxRate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $deductibleTaxRate deductibleTaxRate
     *
     * @return $this
     */
    public function setDeductibleTaxRate($deductibleTaxRate)
    {
        $this->container['deductibleTaxRate'] = $deductibleTaxRate;

        return $this;
    }

    /**
     * Gets maxTaxableAmount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getMaxTaxableAmount()
    {
        return $this->container['maxTaxableAmount'];
    }

    /**
     * Sets maxTaxableAmount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $maxTaxableAmount maxTaxableAmount
     *
     * @return $this
     */
    public function setMaxTaxableAmount($maxTaxableAmount)
    {
        $this->container['maxTaxableAmount'] = $maxTaxableAmount;

        return $this;
    }

    /**
     * Gets minTaxableAmount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getMinTaxableAmount()
    {
        return $this->container['minTaxableAmount'];
    }

    /**
     * Sets minTaxableAmount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $minTaxableAmount minTaxableAmount
     *
     * @return $this
     */
    public function setMinTaxableAmount($minTaxableAmount)
    {
        $this->container['minTaxableAmount'] = $minTaxableAmount;

        return $this;
    }

    /**
     * Gets reportingGroup
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getReportingGroup()
    {
        return $this->container['reportingGroup'];
    }

    /**
     * Sets reportingGroup
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $reportingGroup reportingGroup
     *
     * @return $this
     */
    public function setReportingGroup($reportingGroup)
    {
        $this->container['reportingGroup'] = $reportingGroup;

        return $this;
    }

    /**
     * Gets revisionID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getRevisionID()
    {
        return $this->container['revisionID'];
    }

    /**
     * Sets revisionID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $revisionID revisionID
     *
     * @return $this
     */
    public function setRevisionID($revisionID)
    {
        $this->container['revisionID'] = $revisionID;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets taxID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTaxID()
    {
        return $this->container['taxID'];
    }

    /**
     * Sets taxID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $taxID taxID
     *
     * @return $this
     */
    public function setTaxID($taxID)
    {
        $this->container['taxID'] = $taxID;

        return $this;
    }

    /**
     * Gets taxRate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getTaxRate()
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $taxRate taxRate
     *
     * @return $this
     */
    public function setTaxRate($taxRate)
    {
        $this->container['taxRate'] = $taxRate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


