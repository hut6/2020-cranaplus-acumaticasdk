<?php
/**
 * BusinessAccountLocationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * BusinessAccountLocationModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessAccountLocationModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BusinessAccountLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'city' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'country' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'default' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'locationID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'locationName' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'priceClass' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'salesAccount' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'salesSubaccount' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'state' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'taxZone' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'city' => null,
        'country' => null,
        'default' => null,
        'locationID' => null,
        'locationName' => null,
        'priceClass' => null,
        'salesAccount' => null,
        'salesSubaccount' => null,
        'state' => null,
        'taxZone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'Active',
        'city' => 'City',
        'country' => 'Country',
        'default' => 'Default',
        'locationID' => 'LocationID',
        'locationName' => 'LocationName',
        'priceClass' => 'PriceClass',
        'salesAccount' => 'SalesAccount',
        'salesSubaccount' => 'SalesSubaccount',
        'state' => 'State',
        'taxZone' => 'TaxZone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'city' => 'setCity',
        'country' => 'setCountry',
        'default' => 'setDefault',
        'locationID' => 'setLocationID',
        'locationName' => 'setLocationName',
        'priceClass' => 'setPriceClass',
        'salesAccount' => 'setSalesAccount',
        'salesSubaccount' => 'setSalesSubaccount',
        'state' => 'setState',
        'taxZone' => 'setTaxZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'city' => 'getCity',
        'country' => 'getCountry',
        'default' => 'getDefault',
        'locationID' => 'getLocationID',
        'locationName' => 'getLocationName',
        'priceClass' => 'getPriceClass',
        'salesAccount' => 'getSalesAccount',
        'salesSubaccount' => 'getSalesSubaccount',
        'state' => 'getState',
        'taxZone' => 'getTaxZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['locationID'] = isset($data['locationID']) ? $data['locationID'] : null;
        $this->container['locationName'] = isset($data['locationName']) ? $data['locationName'] : null;
        $this->container['priceClass'] = isset($data['priceClass']) ? $data['priceClass'] : null;
        $this->container['salesAccount'] = isset($data['salesAccount']) ? $data['salesAccount'] : null;
        $this->container['salesSubaccount'] = isset($data['salesSubaccount']) ? $data['salesSubaccount'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['taxZone'] = isset($data['taxZone']) ? $data['taxZone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets city
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets default
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $default default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets locationID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getLocationID()
    {
        return $this->container['locationID'];
    }

    /**
     * Sets locationID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $locationID locationID
     *
     * @return $this
     */
    public function setLocationID($locationID)
    {
        $this->container['locationID'] = $locationID;

        return $this;
    }

    /**
     * Gets locationName
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getLocationName()
    {
        return $this->container['locationName'];
    }

    /**
     * Sets locationName
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $locationName locationName
     *
     * @return $this
     */
    public function setLocationName($locationName)
    {
        $this->container['locationName'] = $locationName;

        return $this;
    }

    /**
     * Gets priceClass
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getPriceClass()
    {
        return $this->container['priceClass'];
    }

    /**
     * Sets priceClass
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $priceClass priceClass
     *
     * @return $this
     */
    public function setPriceClass($priceClass)
    {
        $this->container['priceClass'] = $priceClass;

        return $this;
    }

    /**
     * Gets salesAccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getSalesAccount()
    {
        return $this->container['salesAccount'];
    }

    /**
     * Sets salesAccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $salesAccount salesAccount
     *
     * @return $this
     */
    public function setSalesAccount($salesAccount)
    {
        $this->container['salesAccount'] = $salesAccount;

        return $this;
    }

    /**
     * Gets salesSubaccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getSalesSubaccount()
    {
        return $this->container['salesSubaccount'];
    }

    /**
     * Sets salesSubaccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $salesSubaccount salesSubaccount
     *
     * @return $this
     */
    public function setSalesSubaccount($salesSubaccount)
    {
        $this->container['salesSubaccount'] = $salesSubaccount;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets taxZone
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTaxZone()
    {
        return $this->container['taxZone'];
    }

    /**
     * Sets taxZone
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $taxZone taxZone
     *
     * @return $this
     */
    public function setTaxZone($taxZone)
    {
        $this->container['taxZone'] = $taxZone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


