<?php
/**
 * FinancialDataModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * FinancialDataModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinancialDataModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FinancialData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'type' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'subaccount' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'transactionDate' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'transactionDescription' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'period' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'ledger' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accountID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accountDescription' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accountClassID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accountClassDescription' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'subaccountDescription' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'refNumber' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'module' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'debit' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'credit' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'createdDate' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'transactionType' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'batchControlTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'type' => null,
        'subaccount' => null,
        'transactionDate' => null,
        'transactionDescription' => null,
        'period' => null,
        'ledger' => null,
        'accountID' => null,
        'accountDescription' => null,
        'accountClassID' => null,
        'accountClassDescription' => null,
        'subaccountDescription' => null,
        'refNumber' => null,
        'module' => null,
        'debit' => null,
        'credit' => null,
        'createdDate' => null,
        'transactionType' => null,
        'batchControlTotal' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'Active',
        'type' => 'Type',
        'subaccount' => 'Subaccount',
        'transactionDate' => 'TransactionDate',
        'transactionDescription' => 'TransactionDescription',
        'period' => 'Period',
        'ledger' => 'Ledger',
        'accountID' => 'AccountID',
        'accountDescription' => 'AccountDescription',
        'accountClassID' => 'AccountClassID',
        'accountClassDescription' => 'AccountClassDescription',
        'subaccountDescription' => 'SubaccountDescription',
        'refNumber' => 'RefNumber',
        'module' => 'Module',
        'debit' => 'Debit',
        'credit' => 'Credit',
        'createdDate' => 'CreatedDate',
        'transactionType' => 'TransactionType',
        'batchControlTotal' => 'BatchControlTotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'type' => 'setType',
        'subaccount' => 'setSubaccount',
        'transactionDate' => 'setTransactionDate',
        'transactionDescription' => 'setTransactionDescription',
        'period' => 'setPeriod',
        'ledger' => 'setLedger',
        'accountID' => 'setAccountID',
        'accountDescription' => 'setAccountDescription',
        'accountClassID' => 'setAccountClassID',
        'accountClassDescription' => 'setAccountClassDescription',
        'subaccountDescription' => 'setSubaccountDescription',
        'refNumber' => 'setRefNumber',
        'module' => 'setModule',
        'debit' => 'setDebit',
        'credit' => 'setCredit',
        'createdDate' => 'setCreatedDate',
        'transactionType' => 'setTransactionType',
        'batchControlTotal' => 'setBatchControlTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'type' => 'getType',
        'subaccount' => 'getSubaccount',
        'transactionDate' => 'getTransactionDate',
        'transactionDescription' => 'getTransactionDescription',
        'period' => 'getPeriod',
        'ledger' => 'getLedger',
        'accountID' => 'getAccountID',
        'accountDescription' => 'getAccountDescription',
        'accountClassID' => 'getAccountClassID',
        'accountClassDescription' => 'getAccountClassDescription',
        'subaccountDescription' => 'getSubaccountDescription',
        'refNumber' => 'getRefNumber',
        'module' => 'getModule',
        'debit' => 'getDebit',
        'credit' => 'getCredit',
        'createdDate' => 'getCreatedDate',
        'transactionType' => 'getTransactionType',
        'batchControlTotal' => 'getBatchControlTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['transactionDate'] = isset($data['transactionDate']) ? $data['transactionDate'] : null;
        $this->container['transactionDescription'] = isset($data['transactionDescription']) ? $data['transactionDescription'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['ledger'] = isset($data['ledger']) ? $data['ledger'] : null;
        $this->container['accountID'] = isset($data['accountID']) ? $data['accountID'] : null;
        $this->container['accountDescription'] = isset($data['accountDescription']) ? $data['accountDescription'] : null;
        $this->container['accountClassID'] = isset($data['accountClassID']) ? $data['accountClassID'] : null;
        $this->container['accountClassDescription'] = isset($data['accountClassDescription']) ? $data['accountClassDescription'] : null;
        $this->container['subaccountDescription'] = isset($data['subaccountDescription']) ? $data['subaccountDescription'] : null;
        $this->container['refNumber'] = isset($data['refNumber']) ? $data['refNumber'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['debit'] = isset($data['debit']) ? $data['debit'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['transactionType'] = isset($data['transactionType']) ? $data['transactionType'] : null;
        $this->container['batchControlTotal'] = isset($data['batchControlTotal']) ? $data['batchControlTotal'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $subaccount subaccount
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets transactionDate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getTransactionDate()
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $transactionDate transactionDate
     *
     * @return $this
     */
    public function setTransactionDate($transactionDate)
    {
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets transactionDescription
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTransactionDescription()
    {
        return $this->container['transactionDescription'];
    }

    /**
     * Sets transactionDescription
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $transactionDescription transactionDescription
     *
     * @return $this
     */
    public function setTransactionDescription($transactionDescription)
    {
        $this->container['transactionDescription'] = $transactionDescription;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets ledger
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getLedger()
    {
        return $this->container['ledger'];
    }

    /**
     * Sets ledger
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $ledger ledger
     *
     * @return $this
     */
    public function setLedger($ledger)
    {
        $this->container['ledger'] = $ledger;

        return $this;
    }

    /**
     * Gets accountID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountID()
    {
        return $this->container['accountID'];
    }

    /**
     * Sets accountID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountID accountID
     *
     * @return $this
     */
    public function setAccountID($accountID)
    {
        $this->container['accountID'] = $accountID;

        return $this;
    }

    /**
     * Gets accountDescription
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountDescription()
    {
        return $this->container['accountDescription'];
    }

    /**
     * Sets accountDescription
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountDescription accountDescription
     *
     * @return $this
     */
    public function setAccountDescription($accountDescription)
    {
        $this->container['accountDescription'] = $accountDescription;

        return $this;
    }

    /**
     * Gets accountClassID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountClassID()
    {
        return $this->container['accountClassID'];
    }

    /**
     * Sets accountClassID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountClassID accountClassID
     *
     * @return $this
     */
    public function setAccountClassID($accountClassID)
    {
        $this->container['accountClassID'] = $accountClassID;

        return $this;
    }

    /**
     * Gets accountClassDescription
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountClassDescription()
    {
        return $this->container['accountClassDescription'];
    }

    /**
     * Sets accountClassDescription
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountClassDescription accountClassDescription
     *
     * @return $this
     */
    public function setAccountClassDescription($accountClassDescription)
    {
        $this->container['accountClassDescription'] = $accountClassDescription;

        return $this;
    }

    /**
     * Gets subaccountDescription
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getSubaccountDescription()
    {
        return $this->container['subaccountDescription'];
    }

    /**
     * Sets subaccountDescription
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $subaccountDescription subaccountDescription
     *
     * @return $this
     */
    public function setSubaccountDescription($subaccountDescription)
    {
        $this->container['subaccountDescription'] = $subaccountDescription;

        return $this;
    }

    /**
     * Gets refNumber
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getRefNumber()
    {
        return $this->container['refNumber'];
    }

    /**
     * Sets refNumber
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $refNumber refNumber
     *
     * @return $this
     */
    public function setRefNumber($refNumber)
    {
        $this->container['refNumber'] = $refNumber;

        return $this;
    }

    /**
     * Gets module
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $module module
     *
     * @return $this
     */
    public function setModule($module)
    {
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets debit
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getDebit()
    {
        return $this->container['debit'];
    }

    /**
     * Sets debit
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $debit debit
     *
     * @return $this
     */
    public function setDebit($debit)
    {
        $this->container['debit'] = $debit;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $credit credit
     *
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType($transactionType)
    {
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets batchControlTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getBatchControlTotal()
    {
        return $this->container['batchControlTotal'];
    }

    /**
     * Sets batchControlTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $batchControlTotal batchControlTotal
     *
     * @return $this
     */
    public function setBatchControlTotal($batchControlTotal)
    {
        $this->container['batchControlTotal'] = $batchControlTotal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


