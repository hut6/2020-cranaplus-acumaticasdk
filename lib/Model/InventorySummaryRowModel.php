<?php
/**
 * InventorySummaryRowModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * InventorySummaryRowModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventorySummaryRowModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventorySummaryRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baseUOM' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'estimatedTotalCost' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'estimatedUnitCost' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'expirationDate' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'locationID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'lotSerialNbr' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'qtyAvailable' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'qtyAvailableForShipment' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'qtyNotAvailable' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'qtyOnHand' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'subitem' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'warehouseID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'baseUOM' => null,
        'estimatedTotalCost' => null,
        'estimatedUnitCost' => null,
        'expirationDate' => null,
        'locationID' => null,
        'lotSerialNbr' => null,
        'qtyAvailable' => null,
        'qtyAvailableForShipment' => null,
        'qtyNotAvailable' => null,
        'qtyOnHand' => null,
        'subitem' => null,
        'warehouseID' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'baseUOM' => 'BaseUOM',
        'estimatedTotalCost' => 'EstimatedTotalCost',
        'estimatedUnitCost' => 'EstimatedUnitCost',
        'expirationDate' => 'ExpirationDate',
        'locationID' => 'LocationID',
        'lotSerialNbr' => 'LotSerialNbr',
        'qtyAvailable' => 'QtyAvailable',
        'qtyAvailableForShipment' => 'QtyAvailableForShipment',
        'qtyNotAvailable' => 'QtyNotAvailable',
        'qtyOnHand' => 'QtyOnHand',
        'subitem' => 'Subitem',
        'warehouseID' => 'WarehouseID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'baseUOM' => 'setBaseUOM',
        'estimatedTotalCost' => 'setEstimatedTotalCost',
        'estimatedUnitCost' => 'setEstimatedUnitCost',
        'expirationDate' => 'setExpirationDate',
        'locationID' => 'setLocationID',
        'lotSerialNbr' => 'setLotSerialNbr',
        'qtyAvailable' => 'setQtyAvailable',
        'qtyAvailableForShipment' => 'setQtyAvailableForShipment',
        'qtyNotAvailable' => 'setQtyNotAvailable',
        'qtyOnHand' => 'setQtyOnHand',
        'subitem' => 'setSubitem',
        'warehouseID' => 'setWarehouseID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'baseUOM' => 'getBaseUOM',
        'estimatedTotalCost' => 'getEstimatedTotalCost',
        'estimatedUnitCost' => 'getEstimatedUnitCost',
        'expirationDate' => 'getExpirationDate',
        'locationID' => 'getLocationID',
        'lotSerialNbr' => 'getLotSerialNbr',
        'qtyAvailable' => 'getQtyAvailable',
        'qtyAvailableForShipment' => 'getQtyAvailableForShipment',
        'qtyNotAvailable' => 'getQtyNotAvailable',
        'qtyOnHand' => 'getQtyOnHand',
        'subitem' => 'getSubitem',
        'warehouseID' => 'getWarehouseID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['baseUOM'] = isset($data['baseUOM']) ? $data['baseUOM'] : null;
        $this->container['estimatedTotalCost'] = isset($data['estimatedTotalCost']) ? $data['estimatedTotalCost'] : null;
        $this->container['estimatedUnitCost'] = isset($data['estimatedUnitCost']) ? $data['estimatedUnitCost'] : null;
        $this->container['expirationDate'] = isset($data['expirationDate']) ? $data['expirationDate'] : null;
        $this->container['locationID'] = isset($data['locationID']) ? $data['locationID'] : null;
        $this->container['lotSerialNbr'] = isset($data['lotSerialNbr']) ? $data['lotSerialNbr'] : null;
        $this->container['qtyAvailable'] = isset($data['qtyAvailable']) ? $data['qtyAvailable'] : null;
        $this->container['qtyAvailableForShipment'] = isset($data['qtyAvailableForShipment']) ? $data['qtyAvailableForShipment'] : null;
        $this->container['qtyNotAvailable'] = isset($data['qtyNotAvailable']) ? $data['qtyNotAvailable'] : null;
        $this->container['qtyOnHand'] = isset($data['qtyOnHand']) ? $data['qtyOnHand'] : null;
        $this->container['subitem'] = isset($data['subitem']) ? $data['subitem'] : null;
        $this->container['warehouseID'] = isset($data['warehouseID']) ? $data['warehouseID'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets baseUOM
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getBaseUOM()
    {
        return $this->container['baseUOM'];
    }

    /**
     * Sets baseUOM
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $baseUOM baseUOM
     *
     * @return $this
     */
    public function setBaseUOM($baseUOM)
    {
        $this->container['baseUOM'] = $baseUOM;

        return $this;
    }

    /**
     * Gets estimatedTotalCost
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getEstimatedTotalCost()
    {
        return $this->container['estimatedTotalCost'];
    }

    /**
     * Sets estimatedTotalCost
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $estimatedTotalCost estimatedTotalCost
     *
     * @return $this
     */
    public function setEstimatedTotalCost($estimatedTotalCost)
    {
        $this->container['estimatedTotalCost'] = $estimatedTotalCost;

        return $this;
    }

    /**
     * Gets estimatedUnitCost
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getEstimatedUnitCost()
    {
        return $this->container['estimatedUnitCost'];
    }

    /**
     * Sets estimatedUnitCost
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $estimatedUnitCost estimatedUnitCost
     *
     * @return $this
     */
    public function setEstimatedUnitCost($estimatedUnitCost)
    {
        $this->container['estimatedUnitCost'] = $estimatedUnitCost;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $expirationDate expirationDate
     *
     * @return $this
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets locationID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getLocationID()
    {
        return $this->container['locationID'];
    }

    /**
     * Sets locationID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $locationID locationID
     *
     * @return $this
     */
    public function setLocationID($locationID)
    {
        $this->container['locationID'] = $locationID;

        return $this;
    }

    /**
     * Gets lotSerialNbr
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getLotSerialNbr()
    {
        return $this->container['lotSerialNbr'];
    }

    /**
     * Sets lotSerialNbr
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $lotSerialNbr lotSerialNbr
     *
     * @return $this
     */
    public function setLotSerialNbr($lotSerialNbr)
    {
        $this->container['lotSerialNbr'] = $lotSerialNbr;

        return $this;
    }

    /**
     * Gets qtyAvailable
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getQtyAvailable()
    {
        return $this->container['qtyAvailable'];
    }

    /**
     * Sets qtyAvailable
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $qtyAvailable qtyAvailable
     *
     * @return $this
     */
    public function setQtyAvailable($qtyAvailable)
    {
        $this->container['qtyAvailable'] = $qtyAvailable;

        return $this;
    }

    /**
     * Gets qtyAvailableForShipment
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getQtyAvailableForShipment()
    {
        return $this->container['qtyAvailableForShipment'];
    }

    /**
     * Sets qtyAvailableForShipment
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $qtyAvailableForShipment qtyAvailableForShipment
     *
     * @return $this
     */
    public function setQtyAvailableForShipment($qtyAvailableForShipment)
    {
        $this->container['qtyAvailableForShipment'] = $qtyAvailableForShipment;

        return $this;
    }

    /**
     * Gets qtyNotAvailable
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getQtyNotAvailable()
    {
        return $this->container['qtyNotAvailable'];
    }

    /**
     * Sets qtyNotAvailable
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $qtyNotAvailable qtyNotAvailable
     *
     * @return $this
     */
    public function setQtyNotAvailable($qtyNotAvailable)
    {
        $this->container['qtyNotAvailable'] = $qtyNotAvailable;

        return $this;
    }

    /**
     * Gets qtyOnHand
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getQtyOnHand()
    {
        return $this->container['qtyOnHand'];
    }

    /**
     * Sets qtyOnHand
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $qtyOnHand qtyOnHand
     *
     * @return $this
     */
    public function setQtyOnHand($qtyOnHand)
    {
        $this->container['qtyOnHand'] = $qtyOnHand;

        return $this;
    }

    /**
     * Gets subitem
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getSubitem()
    {
        return $this->container['subitem'];
    }

    /**
     * Sets subitem
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $subitem subitem
     *
     * @return $this
     */
    public function setSubitem($subitem)
    {
        $this->container['subitem'] = $subitem;

        return $this;
    }

    /**
     * Gets warehouseID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getWarehouseID()
    {
        return $this->container['warehouseID'];
    }

    /**
     * Sets warehouseID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $warehouseID warehouseID
     *
     * @return $this
     */
    public function setWarehouseID($warehouseID)
    {
        $this->container['warehouseID'] = $warehouseID;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


