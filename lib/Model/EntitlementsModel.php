<?php
/**
 * EntitlementsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * EntitlementsModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EntitlementsModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Entitlements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employeeID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'compBranch' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'employeename' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'entitlementID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'type' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'unit' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accrualAmount' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'dollarValue' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'accrues' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'transactionDate' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'reason' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'closingBalance' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'openBalance' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'earned' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'entitlementTaken' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'payperiodends' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'payperiodstarts' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'payrunID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'physicalpayday' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employeeID' => null,
        'compBranch' => null,
        'employeename' => null,
        'entitlementID' => null,
        'type' => null,
        'unit' => null,
        'accrualAmount' => null,
        'dollarValue' => null,
        'accrues' => null,
        'transactionDate' => null,
        'reason' => null,
        'closingBalance' => null,
        'openBalance' => null,
        'earned' => null,
        'entitlementTaken' => null,
        'payperiodends' => null,
        'payperiodstarts' => null,
        'payrunID' => null,
        'physicalpayday' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employeeID' => 'EmployeeID',
        'compBranch' => 'CompBranch',
        'employeename' => 'Employeename',
        'entitlementID' => 'EntitlementID',
        'type' => 'Type',
        'unit' => 'Unit',
        'accrualAmount' => 'AccrualAmount',
        'dollarValue' => 'DollarValue',
        'accrues' => 'Accrues',
        'transactionDate' => 'TransactionDate',
        'reason' => 'Reason',
        'closingBalance' => 'ClosingBalance',
        'openBalance' => 'OpenBalance',
        'earned' => 'Earned',
        'entitlementTaken' => 'EntitlementTaken',
        'payperiodends' => 'Payperiodends',
        'payperiodstarts' => 'Payperiodstarts',
        'payrunID' => 'PayrunID',
        'physicalpayday' => 'Physicalpayday'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employeeID' => 'setEmployeeID',
        'compBranch' => 'setCompBranch',
        'employeename' => 'setEmployeename',
        'entitlementID' => 'setEntitlementID',
        'type' => 'setType',
        'unit' => 'setUnit',
        'accrualAmount' => 'setAccrualAmount',
        'dollarValue' => 'setDollarValue',
        'accrues' => 'setAccrues',
        'transactionDate' => 'setTransactionDate',
        'reason' => 'setReason',
        'closingBalance' => 'setClosingBalance',
        'openBalance' => 'setOpenBalance',
        'earned' => 'setEarned',
        'entitlementTaken' => 'setEntitlementTaken',
        'payperiodends' => 'setPayperiodends',
        'payperiodstarts' => 'setPayperiodstarts',
        'payrunID' => 'setPayrunID',
        'physicalpayday' => 'setPhysicalpayday'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employeeID' => 'getEmployeeID',
        'compBranch' => 'getCompBranch',
        'employeename' => 'getEmployeename',
        'entitlementID' => 'getEntitlementID',
        'type' => 'getType',
        'unit' => 'getUnit',
        'accrualAmount' => 'getAccrualAmount',
        'dollarValue' => 'getDollarValue',
        'accrues' => 'getAccrues',
        'transactionDate' => 'getTransactionDate',
        'reason' => 'getReason',
        'closingBalance' => 'getClosingBalance',
        'openBalance' => 'getOpenBalance',
        'earned' => 'getEarned',
        'entitlementTaken' => 'getEntitlementTaken',
        'payperiodends' => 'getPayperiodends',
        'payperiodstarts' => 'getPayperiodstarts',
        'payrunID' => 'getPayrunID',
        'physicalpayday' => 'getPhysicalpayday'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['employeeID'] = isset($data['employeeID']) ? $data['employeeID'] : null;
        $this->container['compBranch'] = isset($data['compBranch']) ? $data['compBranch'] : null;
        $this->container['employeename'] = isset($data['employeename']) ? $data['employeename'] : null;
        $this->container['entitlementID'] = isset($data['entitlementID']) ? $data['entitlementID'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['accrualAmount'] = isset($data['accrualAmount']) ? $data['accrualAmount'] : null;
        $this->container['dollarValue'] = isset($data['dollarValue']) ? $data['dollarValue'] : null;
        $this->container['accrues'] = isset($data['accrues']) ? $data['accrues'] : null;
        $this->container['transactionDate'] = isset($data['transactionDate']) ? $data['transactionDate'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['closingBalance'] = isset($data['closingBalance']) ? $data['closingBalance'] : null;
        $this->container['openBalance'] = isset($data['openBalance']) ? $data['openBalance'] : null;
        $this->container['earned'] = isset($data['earned']) ? $data['earned'] : null;
        $this->container['entitlementTaken'] = isset($data['entitlementTaken']) ? $data['entitlementTaken'] : null;
        $this->container['payperiodends'] = isset($data['payperiodends']) ? $data['payperiodends'] : null;
        $this->container['payperiodstarts'] = isset($data['payperiodstarts']) ? $data['payperiodstarts'] : null;
        $this->container['payrunID'] = isset($data['payrunID']) ? $data['payrunID'] : null;
        $this->container['physicalpayday'] = isset($data['physicalpayday']) ? $data['physicalpayday'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employeeID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getEmployeeID()
    {
        return $this->container['employeeID'];
    }

    /**
     * Sets employeeID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $employeeID employeeID
     *
     * @return $this
     */
    public function setEmployeeID($employeeID)
    {
        $this->container['employeeID'] = $employeeID;

        return $this;
    }

    /**
     * Gets compBranch
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCompBranch()
    {
        return $this->container['compBranch'];
    }

    /**
     * Sets compBranch
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $compBranch compBranch
     *
     * @return $this
     */
    public function setCompBranch($compBranch)
    {
        $this->container['compBranch'] = $compBranch;

        return $this;
    }

    /**
     * Gets employeename
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getEmployeename()
    {
        return $this->container['employeename'];
    }

    /**
     * Sets employeename
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $employeename employeename
     *
     * @return $this
     */
    public function setEmployeename($employeename)
    {
        $this->container['employeename'] = $employeename;

        return $this;
    }

    /**
     * Gets entitlementID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getEntitlementID()
    {
        return $this->container['entitlementID'];
    }

    /**
     * Sets entitlementID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $entitlementID entitlementID
     *
     * @return $this
     */
    public function setEntitlementID($entitlementID)
    {
        $this->container['entitlementID'] = $entitlementID;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets accrualAmount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getAccrualAmount()
    {
        return $this->container['accrualAmount'];
    }

    /**
     * Sets accrualAmount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $accrualAmount accrualAmount
     *
     * @return $this
     */
    public function setAccrualAmount($accrualAmount)
    {
        $this->container['accrualAmount'] = $accrualAmount;

        return $this;
    }

    /**
     * Gets dollarValue
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getDollarValue()
    {
        return $this->container['dollarValue'];
    }

    /**
     * Sets dollarValue
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $dollarValue dollarValue
     *
     * @return $this
     */
    public function setDollarValue($dollarValue)
    {
        $this->container['dollarValue'] = $dollarValue;

        return $this;
    }

    /**
     * Gets accrues
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getAccrues()
    {
        return $this->container['accrues'];
    }

    /**
     * Sets accrues
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $accrues accrues
     *
     * @return $this
     */
    public function setAccrues($accrues)
    {
        $this->container['accrues'] = $accrues;

        return $this;
    }

    /**
     * Gets transactionDate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getTransactionDate()
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $transactionDate transactionDate
     *
     * @return $this
     */
    public function setTransactionDate($transactionDate)
    {
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets closingBalance
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getClosingBalance()
    {
        return $this->container['closingBalance'];
    }

    /**
     * Sets closingBalance
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $closingBalance closingBalance
     *
     * @return $this
     */
    public function setClosingBalance($closingBalance)
    {
        $this->container['closingBalance'] = $closingBalance;

        return $this;
    }

    /**
     * Gets openBalance
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getOpenBalance()
    {
        return $this->container['openBalance'];
    }

    /**
     * Sets openBalance
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $openBalance openBalance
     *
     * @return $this
     */
    public function setOpenBalance($openBalance)
    {
        $this->container['openBalance'] = $openBalance;

        return $this;
    }

    /**
     * Gets earned
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getEarned()
    {
        return $this->container['earned'];
    }

    /**
     * Sets earned
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $earned earned
     *
     * @return $this
     */
    public function setEarned($earned)
    {
        $this->container['earned'] = $earned;

        return $this;
    }

    /**
     * Gets entitlementTaken
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getEntitlementTaken()
    {
        return $this->container['entitlementTaken'];
    }

    /**
     * Sets entitlementTaken
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $entitlementTaken entitlementTaken
     *
     * @return $this
     */
    public function setEntitlementTaken($entitlementTaken)
    {
        $this->container['entitlementTaken'] = $entitlementTaken;

        return $this;
    }

    /**
     * Gets payperiodends
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getPayperiodends()
    {
        return $this->container['payperiodends'];
    }

    /**
     * Sets payperiodends
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $payperiodends payperiodends
     *
     * @return $this
     */
    public function setPayperiodends($payperiodends)
    {
        $this->container['payperiodends'] = $payperiodends;

        return $this;
    }

    /**
     * Gets payperiodstarts
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getPayperiodstarts()
    {
        return $this->container['payperiodstarts'];
    }

    /**
     * Sets payperiodstarts
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $payperiodstarts payperiodstarts
     *
     * @return $this
     */
    public function setPayperiodstarts($payperiodstarts)
    {
        $this->container['payperiodstarts'] = $payperiodstarts;

        return $this;
    }

    /**
     * Gets payrunID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getPayrunID()
    {
        return $this->container['payrunID'];
    }

    /**
     * Sets payrunID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $payrunID payrunID
     *
     * @return $this
     */
    public function setPayrunID($payrunID)
    {
        $this->container['payrunID'] = $payrunID;

        return $this;
    }

    /**
     * Gets physicalpayday
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getPhysicalpayday()
    {
        return $this->container['physicalpayday'];
    }

    /**
     * Sets physicalpayday
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $physicalpayday physicalpayday
     *
     * @return $this
     */
    public function setPhysicalpayday($physicalpayday)
    {
        $this->container['physicalpayday'] = $physicalpayday;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


