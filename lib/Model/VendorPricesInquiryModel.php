<?php
/**
 * VendorPricesInquiryModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * VendorPricesInquiryModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VendorPricesInquiryModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VendorPricesInquiry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inventoryID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'itemClass' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'productManager' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'productWorkgroup' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'vendor' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'vendorPriceDetails' => '\Hut6\CranaplusAcumaticaSdk\Model\VendorPriceDetailModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inventoryID' => null,
        'itemClass' => null,
        'productManager' => null,
        'productWorkgroup' => null,
        'vendor' => null,
        'vendorPriceDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventoryID' => 'InventoryID',
        'itemClass' => 'ItemClass',
        'productManager' => 'ProductManager',
        'productWorkgroup' => 'ProductWorkgroup',
        'vendor' => 'Vendor',
        'vendorPriceDetails' => 'VendorPriceDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventoryID' => 'setInventoryID',
        'itemClass' => 'setItemClass',
        'productManager' => 'setProductManager',
        'productWorkgroup' => 'setProductWorkgroup',
        'vendor' => 'setVendor',
        'vendorPriceDetails' => 'setVendorPriceDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventoryID' => 'getInventoryID',
        'itemClass' => 'getItemClass',
        'productManager' => 'getProductManager',
        'productWorkgroup' => 'getProductWorkgroup',
        'vendor' => 'getVendor',
        'vendorPriceDetails' => 'getVendorPriceDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['inventoryID'] = isset($data['inventoryID']) ? $data['inventoryID'] : null;
        $this->container['itemClass'] = isset($data['itemClass']) ? $data['itemClass'] : null;
        $this->container['productManager'] = isset($data['productManager']) ? $data['productManager'] : null;
        $this->container['productWorkgroup'] = isset($data['productWorkgroup']) ? $data['productWorkgroup'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['vendorPriceDetails'] = isset($data['vendorPriceDetails']) ? $data['vendorPriceDetails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventoryID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getInventoryID()
    {
        return $this->container['inventoryID'];
    }

    /**
     * Sets inventoryID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $inventoryID inventoryID
     *
     * @return $this
     */
    public function setInventoryID($inventoryID)
    {
        $this->container['inventoryID'] = $inventoryID;

        return $this;
    }

    /**
     * Gets itemClass
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getItemClass()
    {
        return $this->container['itemClass'];
    }

    /**
     * Sets itemClass
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $itemClass itemClass
     *
     * @return $this
     */
    public function setItemClass($itemClass)
    {
        $this->container['itemClass'] = $itemClass;

        return $this;
    }

    /**
     * Gets productManager
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getProductManager()
    {
        return $this->container['productManager'];
    }

    /**
     * Sets productManager
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $productManager productManager
     *
     * @return $this
     */
    public function setProductManager($productManager)
    {
        $this->container['productManager'] = $productManager;

        return $this;
    }

    /**
     * Gets productWorkgroup
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getProductWorkgroup()
    {
        return $this->container['productWorkgroup'];
    }

    /**
     * Sets productWorkgroup
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $productWorkgroup productWorkgroup
     *
     * @return $this
     */
    public function setProductWorkgroup($productWorkgroup)
    {
        $this->container['productWorkgroup'] = $productWorkgroup;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendorPriceDetails
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\VendorPriceDetailModel[]
     */
    public function getVendorPriceDetails()
    {
        return $this->container['vendorPriceDetails'];
    }

    /**
     * Sets vendorPriceDetails
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\VendorPriceDetailModel[] $vendorPriceDetails vendorPriceDetails
     *
     * @return $this
     */
    public function setVendorPriceDetails($vendorPriceDetails)
    {
        $this->container['vendorPriceDetails'] = $vendorPriceDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


