<?php
/**
 * PhysicalInventoryReviewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * PhysicalInventoryReviewModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhysicalInventoryReviewModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhysicalInventoryReview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'details' => '\Hut6\CranaplusAcumaticaSdk\Model\PhysicalInventoryReviewDetailModel[]',
        'freezeDate' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'referenceNbr' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'status' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'totalPhysicalQty' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'totalVarianceCost' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'totalVarianceQty' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'typeID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'warehouseID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'details' => null,
        'freezeDate' => null,
        'referenceNbr' => null,
        'status' => null,
        'totalPhysicalQty' => null,
        'totalVarianceCost' => null,
        'totalVarianceQty' => null,
        'typeID' => null,
        'warehouseID' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'details' => 'Details',
        'freezeDate' => 'FreezeDate',
        'referenceNbr' => 'ReferenceNbr',
        'status' => 'Status',
        'totalPhysicalQty' => 'TotalPhysicalQty',
        'totalVarianceCost' => 'TotalVarianceCost',
        'totalVarianceQty' => 'TotalVarianceQty',
        'typeID' => 'TypeID',
        'warehouseID' => 'WarehouseID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'details' => 'setDetails',
        'freezeDate' => 'setFreezeDate',
        'referenceNbr' => 'setReferenceNbr',
        'status' => 'setStatus',
        'totalPhysicalQty' => 'setTotalPhysicalQty',
        'totalVarianceCost' => 'setTotalVarianceCost',
        'totalVarianceQty' => 'setTotalVarianceQty',
        'typeID' => 'setTypeID',
        'warehouseID' => 'setWarehouseID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'details' => 'getDetails',
        'freezeDate' => 'getFreezeDate',
        'referenceNbr' => 'getReferenceNbr',
        'status' => 'getStatus',
        'totalPhysicalQty' => 'getTotalPhysicalQty',
        'totalVarianceCost' => 'getTotalVarianceCost',
        'totalVarianceQty' => 'getTotalVarianceQty',
        'typeID' => 'getTypeID',
        'warehouseID' => 'getWarehouseID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['freezeDate'] = isset($data['freezeDate']) ? $data['freezeDate'] : null;
        $this->container['referenceNbr'] = isset($data['referenceNbr']) ? $data['referenceNbr'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['totalPhysicalQty'] = isset($data['totalPhysicalQty']) ? $data['totalPhysicalQty'] : null;
        $this->container['totalVarianceCost'] = isset($data['totalVarianceCost']) ? $data['totalVarianceCost'] : null;
        $this->container['totalVarianceQty'] = isset($data['totalVarianceQty']) ? $data['totalVarianceQty'] : null;
        $this->container['typeID'] = isset($data['typeID']) ? $data['typeID'] : null;
        $this->container['warehouseID'] = isset($data['warehouseID']) ? $data['warehouseID'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\PhysicalInventoryReviewDetailModel[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\PhysicalInventoryReviewDetailModel[] $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets freezeDate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getFreezeDate()
    {
        return $this->container['freezeDate'];
    }

    /**
     * Sets freezeDate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $freezeDate freezeDate
     *
     * @return $this
     */
    public function setFreezeDate($freezeDate)
    {
        $this->container['freezeDate'] = $freezeDate;

        return $this;
    }

    /**
     * Gets referenceNbr
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getReferenceNbr()
    {
        return $this->container['referenceNbr'];
    }

    /**
     * Sets referenceNbr
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $referenceNbr referenceNbr
     *
     * @return $this
     */
    public function setReferenceNbr($referenceNbr)
    {
        $this->container['referenceNbr'] = $referenceNbr;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets totalPhysicalQty
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getTotalPhysicalQty()
    {
        return $this->container['totalPhysicalQty'];
    }

    /**
     * Sets totalPhysicalQty
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $totalPhysicalQty totalPhysicalQty
     *
     * @return $this
     */
    public function setTotalPhysicalQty($totalPhysicalQty)
    {
        $this->container['totalPhysicalQty'] = $totalPhysicalQty;

        return $this;
    }

    /**
     * Gets totalVarianceCost
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getTotalVarianceCost()
    {
        return $this->container['totalVarianceCost'];
    }

    /**
     * Sets totalVarianceCost
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $totalVarianceCost totalVarianceCost
     *
     * @return $this
     */
    public function setTotalVarianceCost($totalVarianceCost)
    {
        $this->container['totalVarianceCost'] = $totalVarianceCost;

        return $this;
    }

    /**
     * Gets totalVarianceQty
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getTotalVarianceQty()
    {
        return $this->container['totalVarianceQty'];
    }

    /**
     * Sets totalVarianceQty
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $totalVarianceQty totalVarianceQty
     *
     * @return $this
     */
    public function setTotalVarianceQty($totalVarianceQty)
    {
        $this->container['totalVarianceQty'] = $totalVarianceQty;

        return $this;
    }

    /**
     * Gets typeID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTypeID()
    {
        return $this->container['typeID'];
    }

    /**
     * Sets typeID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $typeID typeID
     *
     * @return $this
     */
    public function setTypeID($typeID)
    {
        $this->container['typeID'] = $typeID;

        return $this;
    }

    /**
     * Gets warehouseID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getWarehouseID()
    {
        return $this->container['warehouseID'];
    }

    /**
     * Sets warehouseID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $warehouseID warehouseID
     *
     * @return $this
     */
    public function setWarehouseID($warehouseID)
    {
        $this->container['warehouseID'] = $warehouseID;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


