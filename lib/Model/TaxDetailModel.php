<?php
/**
 * TaxDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;

use \ArrayAccess;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * TaxDetailModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxDetailModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaxDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'rowNumber' => 'int',
        'note' => 'string',
        'custom' => 'map[string,map[string,\Hut6\CranaplusAcumaticaSdk\Model\CustomFieldModel]]',
        'files' => '\Hut6\CranaplusAcumaticaSdk\Model\FileLinkModel[]',
        'includeInVATExemptTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'lineNbr' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'orderNbr' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'orderType' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'pendingVAT' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'recordID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'reverseVAT' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'statisticalVAT' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'taxableAmount' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'taxAmount' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'taxID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'taxRate' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'taxType' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'rowNumber' => 'int64',
        'note' => null,
        'custom' => null,
        'files' => null,
        'includeInVATExemptTotal' => null,
        'lineNbr' => null,
        'orderNbr' => null,
        'orderType' => null,
        'pendingVAT' => null,
        'recordID' => null,
        'reverseVAT' => null,
        'statisticalVAT' => null,
        'taxableAmount' => null,
        'taxAmount' => null,
        'taxID' => null,
        'taxRate' => null,
        'taxType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'rowNumber' => 'rowNumber',
        'note' => 'note',
        'custom' => 'custom',
        'files' => 'files',
        'includeInVATExemptTotal' => 'IncludeInVATExemptTotal',
        'lineNbr' => 'LineNbr',
        'orderNbr' => 'OrderNbr',
        'orderType' => 'OrderType',
        'pendingVAT' => 'PendingVAT',
        'recordID' => 'RecordID',
        'reverseVAT' => 'ReverseVAT',
        'statisticalVAT' => 'StatisticalVAT',
        'taxableAmount' => 'TaxableAmount',
        'taxAmount' => 'TaxAmount',
        'taxID' => 'TaxID',
        'taxRate' => 'TaxRate',
        'taxType' => 'TaxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'rowNumber' => 'setRowNumber',
        'note' => 'setNote',
        'custom' => 'setCustom',
        'files' => 'setFiles',
        'includeInVATExemptTotal' => 'setIncludeInVATExemptTotal',
        'lineNbr' => 'setLineNbr',
        'orderNbr' => 'setOrderNbr',
        'orderType' => 'setOrderType',
        'pendingVAT' => 'setPendingVAT',
        'recordID' => 'setRecordID',
        'reverseVAT' => 'setReverseVAT',
        'statisticalVAT' => 'setStatisticalVAT',
        'taxableAmount' => 'setTaxableAmount',
        'taxAmount' => 'setTaxAmount',
        'taxID' => 'setTaxID',
        'taxRate' => 'setTaxRate',
        'taxType' => 'setTaxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'rowNumber' => 'getRowNumber',
        'note' => 'getNote',
        'custom' => 'getCustom',
        'files' => 'getFiles',
        'includeInVATExemptTotal' => 'getIncludeInVATExemptTotal',
        'lineNbr' => 'getLineNbr',
        'orderNbr' => 'getOrderNbr',
        'orderType' => 'getOrderType',
        'pendingVAT' => 'getPendingVAT',
        'recordID' => 'getRecordID',
        'reverseVAT' => 'getReverseVAT',
        'statisticalVAT' => 'getStatisticalVAT',
        'taxableAmount' => 'getTaxableAmount',
        'taxAmount' => 'getTaxAmount',
        'taxID' => 'getTaxID',
        'taxRate' => 'getTaxRate',
        'taxType' => 'getTaxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['rowNumber'] = isset($data['rowNumber']) ? $data['rowNumber'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['custom'] = isset($data['custom']) ? $data['custom'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['includeInVATExemptTotal'] = isset($data['includeInVATExemptTotal']) ? $data['includeInVATExemptTotal'] : null;
        $this->container['lineNbr'] = isset($data['lineNbr']) ? $data['lineNbr'] : null;
        $this->container['orderNbr'] = isset($data['orderNbr']) ? $data['orderNbr'] : null;
        $this->container['orderType'] = isset($data['orderType']) ? $data['orderType'] : null;
        $this->container['pendingVAT'] = isset($data['pendingVAT']) ? $data['pendingVAT'] : null;
        $this->container['recordID'] = isset($data['recordID']) ? $data['recordID'] : null;
        $this->container['reverseVAT'] = isset($data['reverseVAT']) ? $data['reverseVAT'] : null;
        $this->container['statisticalVAT'] = isset($data['statisticalVAT']) ? $data['statisticalVAT'] : null;
        $this->container['taxableAmount'] = isset($data['taxableAmount']) ? $data['taxableAmount'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['taxID'] = isset($data['taxID']) ? $data['taxID'] : null;
        $this->container['taxRate'] = isset($data['taxRate']) ? $data['taxRate'] : null;
        $this->container['taxType'] = isset($data['taxType']) ? $data['taxType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets rowNumber
     *
     * @return int
     */
    public function getRowNumber()
    {
        return $this->container['rowNumber'];
    }

    /**
     * Sets rowNumber
     *
     * @param int $rowNumber rowNumber
     *
     * @return $this
     */
    public function setRowNumber($rowNumber)
    {
        $this->container['rowNumber'] = $rowNumber;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return map[string,map[string,\Hut6\CranaplusAcumaticaSdk\Model\CustomFieldModel]]
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param map[string,map[string,\Hut6\CranaplusAcumaticaSdk\Model\CustomFieldModel]] $custom custom
     *
     * @return $this
     */
    public function setCustom($custom)
    {
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\FileLinkModel[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\FileLinkModel[] $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets includeInVATExemptTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getIncludeInVATExemptTotal()
    {
        return $this->container['includeInVATExemptTotal'];
    }

    /**
     * Sets includeInVATExemptTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $includeInVATExemptTotal includeInVATExemptTotal
     *
     * @return $this
     */
    public function setIncludeInVATExemptTotal($includeInVATExemptTotal)
    {
        $this->container['includeInVATExemptTotal'] = $includeInVATExemptTotal;

        return $this;
    }

    /**
     * Gets lineNbr
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getLineNbr()
    {
        return $this->container['lineNbr'];
    }

    /**
     * Sets lineNbr
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $lineNbr lineNbr
     *
     * @return $this
     */
    public function setLineNbr($lineNbr)
    {
        $this->container['lineNbr'] = $lineNbr;

        return $this;
    }

    /**
     * Gets orderNbr
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getOrderNbr()
    {
        return $this->container['orderNbr'];
    }

    /**
     * Sets orderNbr
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $orderNbr orderNbr
     *
     * @return $this
     */
    public function setOrderNbr($orderNbr)
    {
        $this->container['orderNbr'] = $orderNbr;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $orderType orderType
     *
     * @return $this
     */
    public function setOrderType($orderType)
    {
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets pendingVAT
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getPendingVAT()
    {
        return $this->container['pendingVAT'];
    }

    /**
     * Sets pendingVAT
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $pendingVAT pendingVAT
     *
     * @return $this
     */
    public function setPendingVAT($pendingVAT)
    {
        $this->container['pendingVAT'] = $pendingVAT;

        return $this;
    }

    /**
     * Gets recordID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getRecordID()
    {
        return $this->container['recordID'];
    }

    /**
     * Sets recordID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $recordID recordID
     *
     * @return $this
     */
    public function setRecordID($recordID)
    {
        $this->container['recordID'] = $recordID;

        return $this;
    }

    /**
     * Gets reverseVAT
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getReverseVAT()
    {
        return $this->container['reverseVAT'];
    }

    /**
     * Sets reverseVAT
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $reverseVAT reverseVAT
     *
     * @return $this
     */
    public function setReverseVAT($reverseVAT)
    {
        $this->container['reverseVAT'] = $reverseVAT;

        return $this;
    }

    /**
     * Gets statisticalVAT
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getStatisticalVAT()
    {
        return $this->container['statisticalVAT'];
    }

    /**
     * Sets statisticalVAT
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $statisticalVAT statisticalVAT
     *
     * @return $this
     */
    public function setStatisticalVAT($statisticalVAT)
    {
        $this->container['statisticalVAT'] = $statisticalVAT;

        return $this;
    }

    /**
     * Gets taxableAmount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getTaxableAmount()
    {
        return $this->container['taxableAmount'];
    }

    /**
     * Sets taxableAmount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $taxableAmount taxableAmount
     *
     * @return $this
     */
    public function setTaxableAmount($taxableAmount)
    {
        $this->container['taxableAmount'] = $taxableAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $taxAmount taxAmount
     *
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets taxID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTaxID()
    {
        return $this->container['taxID'];
    }

    /**
     * Sets taxID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $taxID taxID
     *
     * @return $this
     */
    public function setTaxID($taxID)
    {
        $this->container['taxID'] = $taxID;

        return $this;
    }

    /**
     * Gets taxRate
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getTaxRate()
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $taxRate taxRate
     *
     * @return $this
     */
    public function setTaxRate($taxRate)
    {
        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets taxType
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTaxType()
    {
        return $this->container['taxType'];
    }

    /**
     * Sets taxType
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $taxType taxType
     *
     * @return $this
     */
    public function setTaxType($taxType)
    {
        $this->container['taxType'] = $taxType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


