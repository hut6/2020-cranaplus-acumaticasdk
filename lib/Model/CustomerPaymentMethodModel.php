<?php
/**
 * CustomerPaymentMethodModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * CustomerPaymentMethodModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerPaymentMethodModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerPaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'cardAccountNbr' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'cashAccount' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'createdDateTime' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'customerID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'customerProfileID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'details' => '\Hut6\CranaplusAcumaticaSdk\Model\CustomerPaymentMethodDetailModel[]',
        'instanceID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'lastModifiedDateTime' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'paymentMethod' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'procCenterID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'cardAccountNbr' => null,
        'cashAccount' => null,
        'createdDateTime' => null,
        'customerID' => null,
        'customerProfileID' => null,
        'details' => null,
        'instanceID' => null,
        'lastModifiedDateTime' => null,
        'paymentMethod' => null,
        'procCenterID' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'Active',
        'cardAccountNbr' => 'CardAccountNbr',
        'cashAccount' => 'CashAccount',
        'createdDateTime' => 'CreatedDateTime',
        'customerID' => 'CustomerID',
        'customerProfileID' => 'CustomerProfileID',
        'details' => 'Details',
        'instanceID' => 'InstanceID',
        'lastModifiedDateTime' => 'LastModifiedDateTime',
        'paymentMethod' => 'PaymentMethod',
        'procCenterID' => 'ProcCenterID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'cardAccountNbr' => 'setCardAccountNbr',
        'cashAccount' => 'setCashAccount',
        'createdDateTime' => 'setCreatedDateTime',
        'customerID' => 'setCustomerID',
        'customerProfileID' => 'setCustomerProfileID',
        'details' => 'setDetails',
        'instanceID' => 'setInstanceID',
        'lastModifiedDateTime' => 'setLastModifiedDateTime',
        'paymentMethod' => 'setPaymentMethod',
        'procCenterID' => 'setProcCenterID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'cardAccountNbr' => 'getCardAccountNbr',
        'cashAccount' => 'getCashAccount',
        'createdDateTime' => 'getCreatedDateTime',
        'customerID' => 'getCustomerID',
        'customerProfileID' => 'getCustomerProfileID',
        'details' => 'getDetails',
        'instanceID' => 'getInstanceID',
        'lastModifiedDateTime' => 'getLastModifiedDateTime',
        'paymentMethod' => 'getPaymentMethod',
        'procCenterID' => 'getProcCenterID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['cardAccountNbr'] = isset($data['cardAccountNbr']) ? $data['cardAccountNbr'] : null;
        $this->container['cashAccount'] = isset($data['cashAccount']) ? $data['cashAccount'] : null;
        $this->container['createdDateTime'] = isset($data['createdDateTime']) ? $data['createdDateTime'] : null;
        $this->container['customerID'] = isset($data['customerID']) ? $data['customerID'] : null;
        $this->container['customerProfileID'] = isset($data['customerProfileID']) ? $data['customerProfileID'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['instanceID'] = isset($data['instanceID']) ? $data['instanceID'] : null;
        $this->container['lastModifiedDateTime'] = isset($data['lastModifiedDateTime']) ? $data['lastModifiedDateTime'] : null;
        $this->container['paymentMethod'] = isset($data['paymentMethod']) ? $data['paymentMethod'] : null;
        $this->container['procCenterID'] = isset($data['procCenterID']) ? $data['procCenterID'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets cardAccountNbr
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCardAccountNbr()
    {
        return $this->container['cardAccountNbr'];
    }

    /**
     * Sets cardAccountNbr
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $cardAccountNbr cardAccountNbr
     *
     * @return $this
     */
    public function setCardAccountNbr($cardAccountNbr)
    {
        $this->container['cardAccountNbr'] = $cardAccountNbr;

        return $this;
    }

    /**
     * Gets cashAccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCashAccount()
    {
        return $this->container['cashAccount'];
    }

    /**
     * Sets cashAccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $cashAccount cashAccount
     *
     * @return $this
     */
    public function setCashAccount($cashAccount)
    {
        $this->container['cashAccount'] = $cashAccount;

        return $this;
    }

    /**
     * Gets createdDateTime
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getCreatedDateTime()
    {
        return $this->container['createdDateTime'];
    }

    /**
     * Sets createdDateTime
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $createdDateTime createdDateTime
     *
     * @return $this
     */
    public function setCreatedDateTime($createdDateTime)
    {
        $this->container['createdDateTime'] = $createdDateTime;

        return $this;
    }

    /**
     * Gets customerID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCustomerID()
    {
        return $this->container['customerID'];
    }

    /**
     * Sets customerID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $customerID customerID
     *
     * @return $this
     */
    public function setCustomerID($customerID)
    {
        $this->container['customerID'] = $customerID;

        return $this;
    }

    /**
     * Gets customerProfileID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCustomerProfileID()
    {
        return $this->container['customerProfileID'];
    }

    /**
     * Sets customerProfileID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $customerProfileID customerProfileID
     *
     * @return $this
     */
    public function setCustomerProfileID($customerProfileID)
    {
        $this->container['customerProfileID'] = $customerProfileID;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\CustomerPaymentMethodDetailModel[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\CustomerPaymentMethodDetailModel[] $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets instanceID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getInstanceID()
    {
        return $this->container['instanceID'];
    }

    /**
     * Sets instanceID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $instanceID instanceID
     *
     * @return $this
     */
    public function setInstanceID($instanceID)
    {
        $this->container['instanceID'] = $instanceID;

        return $this;
    }

    /**
     * Gets lastModifiedDateTime
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['lastModifiedDateTime'];
    }

    /**
     * Sets lastModifiedDateTime
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $lastModifiedDateTime lastModifiedDateTime
     *
     * @return $this
     */
    public function setLastModifiedDateTime($lastModifiedDateTime)
    {
        $this->container['lastModifiedDateTime'] = $lastModifiedDateTime;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $paymentMethod paymentMethod
     *
     * @return $this
     */
    public function setPaymentMethod($paymentMethod)
    {
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets procCenterID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getProcCenterID()
    {
        return $this->container['procCenterID'];
    }

    /**
     * Sets procCenterID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $procCenterID procCenterID
     *
     * @return $this
     */
    public function setProcCenterID($procCenterID)
    {
        $this->container['procCenterID'] = $procCenterID;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


