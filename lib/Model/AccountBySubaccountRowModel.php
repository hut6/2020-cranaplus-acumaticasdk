<?php
/**
 * AccountBySubaccountRowModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * AccountBySubaccountRowModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountBySubaccountRowModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountBySubaccountRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'beginingBalance' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'creditTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'currencyBeginingBalance' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'currencyCreditTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'currencyDebitTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'currencyEndingBalance' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'currencyID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'currencyPtdTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'debitTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'endingBalance' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'ledgerID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'ptdTotal' => '\Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel',
        'subaccount' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'beginingBalance' => null,
        'creditTotal' => null,
        'currencyBeginingBalance' => null,
        'currencyCreditTotal' => null,
        'currencyDebitTotal' => null,
        'currencyEndingBalance' => null,
        'currencyID' => null,
        'currencyPtdTotal' => null,
        'debitTotal' => null,
        'endingBalance' => null,
        'ledgerID' => null,
        'ptdTotal' => null,
        'subaccount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beginingBalance' => 'BeginingBalance',
        'creditTotal' => 'CreditTotal',
        'currencyBeginingBalance' => 'CurrencyBeginingBalance',
        'currencyCreditTotal' => 'CurrencyCreditTotal',
        'currencyDebitTotal' => 'CurrencyDebitTotal',
        'currencyEndingBalance' => 'CurrencyEndingBalance',
        'currencyID' => 'CurrencyID',
        'currencyPtdTotal' => 'CurrencyPtdTotal',
        'debitTotal' => 'DebitTotal',
        'endingBalance' => 'EndingBalance',
        'ledgerID' => 'LedgerID',
        'ptdTotal' => 'PtdTotal',
        'subaccount' => 'Subaccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beginingBalance' => 'setBeginingBalance',
        'creditTotal' => 'setCreditTotal',
        'currencyBeginingBalance' => 'setCurrencyBeginingBalance',
        'currencyCreditTotal' => 'setCurrencyCreditTotal',
        'currencyDebitTotal' => 'setCurrencyDebitTotal',
        'currencyEndingBalance' => 'setCurrencyEndingBalance',
        'currencyID' => 'setCurrencyID',
        'currencyPtdTotal' => 'setCurrencyPtdTotal',
        'debitTotal' => 'setDebitTotal',
        'endingBalance' => 'setEndingBalance',
        'ledgerID' => 'setLedgerID',
        'ptdTotal' => 'setPtdTotal',
        'subaccount' => 'setSubaccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beginingBalance' => 'getBeginingBalance',
        'creditTotal' => 'getCreditTotal',
        'currencyBeginingBalance' => 'getCurrencyBeginingBalance',
        'currencyCreditTotal' => 'getCurrencyCreditTotal',
        'currencyDebitTotal' => 'getCurrencyDebitTotal',
        'currencyEndingBalance' => 'getCurrencyEndingBalance',
        'currencyID' => 'getCurrencyID',
        'currencyPtdTotal' => 'getCurrencyPtdTotal',
        'debitTotal' => 'getDebitTotal',
        'endingBalance' => 'getEndingBalance',
        'ledgerID' => 'getLedgerID',
        'ptdTotal' => 'getPtdTotal',
        'subaccount' => 'getSubaccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['beginingBalance'] = isset($data['beginingBalance']) ? $data['beginingBalance'] : null;
        $this->container['creditTotal'] = isset($data['creditTotal']) ? $data['creditTotal'] : null;
        $this->container['currencyBeginingBalance'] = isset($data['currencyBeginingBalance']) ? $data['currencyBeginingBalance'] : null;
        $this->container['currencyCreditTotal'] = isset($data['currencyCreditTotal']) ? $data['currencyCreditTotal'] : null;
        $this->container['currencyDebitTotal'] = isset($data['currencyDebitTotal']) ? $data['currencyDebitTotal'] : null;
        $this->container['currencyEndingBalance'] = isset($data['currencyEndingBalance']) ? $data['currencyEndingBalance'] : null;
        $this->container['currencyID'] = isset($data['currencyID']) ? $data['currencyID'] : null;
        $this->container['currencyPtdTotal'] = isset($data['currencyPtdTotal']) ? $data['currencyPtdTotal'] : null;
        $this->container['debitTotal'] = isset($data['debitTotal']) ? $data['debitTotal'] : null;
        $this->container['endingBalance'] = isset($data['endingBalance']) ? $data['endingBalance'] : null;
        $this->container['ledgerID'] = isset($data['ledgerID']) ? $data['ledgerID'] : null;
        $this->container['ptdTotal'] = isset($data['ptdTotal']) ? $data['ptdTotal'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets beginingBalance
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getBeginingBalance()
    {
        return $this->container['beginingBalance'];
    }

    /**
     * Sets beginingBalance
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $beginingBalance beginingBalance
     *
     * @return $this
     */
    public function setBeginingBalance($beginingBalance)
    {
        $this->container['beginingBalance'] = $beginingBalance;

        return $this;
    }

    /**
     * Gets creditTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getCreditTotal()
    {
        return $this->container['creditTotal'];
    }

    /**
     * Sets creditTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $creditTotal creditTotal
     *
     * @return $this
     */
    public function setCreditTotal($creditTotal)
    {
        $this->container['creditTotal'] = $creditTotal;

        return $this;
    }

    /**
     * Gets currencyBeginingBalance
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getCurrencyBeginingBalance()
    {
        return $this->container['currencyBeginingBalance'];
    }

    /**
     * Sets currencyBeginingBalance
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $currencyBeginingBalance currencyBeginingBalance
     *
     * @return $this
     */
    public function setCurrencyBeginingBalance($currencyBeginingBalance)
    {
        $this->container['currencyBeginingBalance'] = $currencyBeginingBalance;

        return $this;
    }

    /**
     * Gets currencyCreditTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getCurrencyCreditTotal()
    {
        return $this->container['currencyCreditTotal'];
    }

    /**
     * Sets currencyCreditTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $currencyCreditTotal currencyCreditTotal
     *
     * @return $this
     */
    public function setCurrencyCreditTotal($currencyCreditTotal)
    {
        $this->container['currencyCreditTotal'] = $currencyCreditTotal;

        return $this;
    }

    /**
     * Gets currencyDebitTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getCurrencyDebitTotal()
    {
        return $this->container['currencyDebitTotal'];
    }

    /**
     * Sets currencyDebitTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $currencyDebitTotal currencyDebitTotal
     *
     * @return $this
     */
    public function setCurrencyDebitTotal($currencyDebitTotal)
    {
        $this->container['currencyDebitTotal'] = $currencyDebitTotal;

        return $this;
    }

    /**
     * Gets currencyEndingBalance
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getCurrencyEndingBalance()
    {
        return $this->container['currencyEndingBalance'];
    }

    /**
     * Sets currencyEndingBalance
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $currencyEndingBalance currencyEndingBalance
     *
     * @return $this
     */
    public function setCurrencyEndingBalance($currencyEndingBalance)
    {
        $this->container['currencyEndingBalance'] = $currencyEndingBalance;

        return $this;
    }

    /**
     * Gets currencyID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCurrencyID()
    {
        return $this->container['currencyID'];
    }

    /**
     * Sets currencyID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $currencyID currencyID
     *
     * @return $this
     */
    public function setCurrencyID($currencyID)
    {
        $this->container['currencyID'] = $currencyID;

        return $this;
    }

    /**
     * Gets currencyPtdTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getCurrencyPtdTotal()
    {
        return $this->container['currencyPtdTotal'];
    }

    /**
     * Sets currencyPtdTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $currencyPtdTotal currencyPtdTotal
     *
     * @return $this
     */
    public function setCurrencyPtdTotal($currencyPtdTotal)
    {
        $this->container['currencyPtdTotal'] = $currencyPtdTotal;

        return $this;
    }

    /**
     * Gets debitTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getDebitTotal()
    {
        return $this->container['debitTotal'];
    }

    /**
     * Sets debitTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $debitTotal debitTotal
     *
     * @return $this
     */
    public function setDebitTotal($debitTotal)
    {
        $this->container['debitTotal'] = $debitTotal;

        return $this;
    }

    /**
     * Gets endingBalance
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getEndingBalance()
    {
        return $this->container['endingBalance'];
    }

    /**
     * Sets endingBalance
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $endingBalance endingBalance
     *
     * @return $this
     */
    public function setEndingBalance($endingBalance)
    {
        $this->container['endingBalance'] = $endingBalance;

        return $this;
    }

    /**
     * Gets ledgerID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getLedgerID()
    {
        return $this->container['ledgerID'];
    }

    /**
     * Sets ledgerID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $ledgerID ledgerID
     *
     * @return $this
     */
    public function setLedgerID($ledgerID)
    {
        $this->container['ledgerID'] = $ledgerID;

        return $this;
    }

    /**
     * Gets ptdTotal
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel
     */
    public function getPtdTotal()
    {
        return $this->container['ptdTotal'];
    }

    /**
     * Sets ptdTotal
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DecimalValueModel $ptdTotal ptdTotal
     *
     * @return $this
     */
    public function setPtdTotal($ptdTotal)
    {
        $this->container['ptdTotal'] = $ptdTotal;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $subaccount subaccount
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


