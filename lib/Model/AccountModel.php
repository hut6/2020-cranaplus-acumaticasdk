<?php
/**
 * AccountModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * AccountModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountCD' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accountClass' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accountGroup' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'accountID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'active' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'cashAccount' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'chartOfAccountsOrder' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'consolidationAccount' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'createdDateTime' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'currencyID' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'description' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'lastModifiedDateTime' => '\Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel',
        'postOption' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'requireUnits' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'revaluationRateType' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'secured' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'taxCategory' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'type' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'useDefaultSubaccount' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountCD' => null,
        'accountClass' => null,
        'accountGroup' => null,
        'accountID' => null,
        'active' => null,
        'cashAccount' => null,
        'chartOfAccountsOrder' => null,
        'consolidationAccount' => null,
        'createdDateTime' => null,
        'currencyID' => null,
        'description' => null,
        'lastModifiedDateTime' => null,
        'postOption' => null,
        'requireUnits' => null,
        'revaluationRateType' => null,
        'secured' => null,
        'taxCategory' => null,
        'type' => null,
        'useDefaultSubaccount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountCD' => 'AccountCD',
        'accountClass' => 'AccountClass',
        'accountGroup' => 'AccountGroup',
        'accountID' => 'AccountID',
        'active' => 'Active',
        'cashAccount' => 'CashAccount',
        'chartOfAccountsOrder' => 'ChartOfAccountsOrder',
        'consolidationAccount' => 'ConsolidationAccount',
        'createdDateTime' => 'CreatedDateTime',
        'currencyID' => 'CurrencyID',
        'description' => 'Description',
        'lastModifiedDateTime' => 'LastModifiedDateTime',
        'postOption' => 'PostOption',
        'requireUnits' => 'RequireUnits',
        'revaluationRateType' => 'RevaluationRateType',
        'secured' => 'Secured',
        'taxCategory' => 'TaxCategory',
        'type' => 'Type',
        'useDefaultSubaccount' => 'UseDefaultSubaccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountCD' => 'setAccountCD',
        'accountClass' => 'setAccountClass',
        'accountGroup' => 'setAccountGroup',
        'accountID' => 'setAccountID',
        'active' => 'setActive',
        'cashAccount' => 'setCashAccount',
        'chartOfAccountsOrder' => 'setChartOfAccountsOrder',
        'consolidationAccount' => 'setConsolidationAccount',
        'createdDateTime' => 'setCreatedDateTime',
        'currencyID' => 'setCurrencyID',
        'description' => 'setDescription',
        'lastModifiedDateTime' => 'setLastModifiedDateTime',
        'postOption' => 'setPostOption',
        'requireUnits' => 'setRequireUnits',
        'revaluationRateType' => 'setRevaluationRateType',
        'secured' => 'setSecured',
        'taxCategory' => 'setTaxCategory',
        'type' => 'setType',
        'useDefaultSubaccount' => 'setUseDefaultSubaccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountCD' => 'getAccountCD',
        'accountClass' => 'getAccountClass',
        'accountGroup' => 'getAccountGroup',
        'accountID' => 'getAccountID',
        'active' => 'getActive',
        'cashAccount' => 'getCashAccount',
        'chartOfAccountsOrder' => 'getChartOfAccountsOrder',
        'consolidationAccount' => 'getConsolidationAccount',
        'createdDateTime' => 'getCreatedDateTime',
        'currencyID' => 'getCurrencyID',
        'description' => 'getDescription',
        'lastModifiedDateTime' => 'getLastModifiedDateTime',
        'postOption' => 'getPostOption',
        'requireUnits' => 'getRequireUnits',
        'revaluationRateType' => 'getRevaluationRateType',
        'secured' => 'getSecured',
        'taxCategory' => 'getTaxCategory',
        'type' => 'getType',
        'useDefaultSubaccount' => 'getUseDefaultSubaccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['accountCD'] = isset($data['accountCD']) ? $data['accountCD'] : null;
        $this->container['accountClass'] = isset($data['accountClass']) ? $data['accountClass'] : null;
        $this->container['accountGroup'] = isset($data['accountGroup']) ? $data['accountGroup'] : null;
        $this->container['accountID'] = isset($data['accountID']) ? $data['accountID'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['cashAccount'] = isset($data['cashAccount']) ? $data['cashAccount'] : null;
        $this->container['chartOfAccountsOrder'] = isset($data['chartOfAccountsOrder']) ? $data['chartOfAccountsOrder'] : null;
        $this->container['consolidationAccount'] = isset($data['consolidationAccount']) ? $data['consolidationAccount'] : null;
        $this->container['createdDateTime'] = isset($data['createdDateTime']) ? $data['createdDateTime'] : null;
        $this->container['currencyID'] = isset($data['currencyID']) ? $data['currencyID'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['lastModifiedDateTime'] = isset($data['lastModifiedDateTime']) ? $data['lastModifiedDateTime'] : null;
        $this->container['postOption'] = isset($data['postOption']) ? $data['postOption'] : null;
        $this->container['requireUnits'] = isset($data['requireUnits']) ? $data['requireUnits'] : null;
        $this->container['revaluationRateType'] = isset($data['revaluationRateType']) ? $data['revaluationRateType'] : null;
        $this->container['secured'] = isset($data['secured']) ? $data['secured'] : null;
        $this->container['taxCategory'] = isset($data['taxCategory']) ? $data['taxCategory'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['useDefaultSubaccount'] = isset($data['useDefaultSubaccount']) ? $data['useDefaultSubaccount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountCD
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountCD()
    {
        return $this->container['accountCD'];
    }

    /**
     * Sets accountCD
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountCD accountCD
     *
     * @return $this
     */
    public function setAccountCD($accountCD)
    {
        $this->container['accountCD'] = $accountCD;

        return $this;
    }

    /**
     * Gets accountClass
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountClass()
    {
        return $this->container['accountClass'];
    }

    /**
     * Sets accountClass
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountClass accountClass
     *
     * @return $this
     */
    public function setAccountClass($accountClass)
    {
        $this->container['accountClass'] = $accountClass;

        return $this;
    }

    /**
     * Gets accountGroup
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccountGroup()
    {
        return $this->container['accountGroup'];
    }

    /**
     * Sets accountGroup
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $accountGroup accountGroup
     *
     * @return $this
     */
    public function setAccountGroup($accountGroup)
    {
        $this->container['accountGroup'] = $accountGroup;

        return $this;
    }

    /**
     * Gets accountID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getAccountID()
    {
        return $this->container['accountID'];
    }

    /**
     * Sets accountID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $accountID accountID
     *
     * @return $this
     */
    public function setAccountID($accountID)
    {
        $this->container['accountID'] = $accountID;

        return $this;
    }

    /**
     * Gets active
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets cashAccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getCashAccount()
    {
        return $this->container['cashAccount'];
    }

    /**
     * Sets cashAccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $cashAccount cashAccount
     *
     * @return $this
     */
    public function setCashAccount($cashAccount)
    {
        $this->container['cashAccount'] = $cashAccount;

        return $this;
    }

    /**
     * Gets chartOfAccountsOrder
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getChartOfAccountsOrder()
    {
        return $this->container['chartOfAccountsOrder'];
    }

    /**
     * Sets chartOfAccountsOrder
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $chartOfAccountsOrder chartOfAccountsOrder
     *
     * @return $this
     */
    public function setChartOfAccountsOrder($chartOfAccountsOrder)
    {
        $this->container['chartOfAccountsOrder'] = $chartOfAccountsOrder;

        return $this;
    }

    /**
     * Gets consolidationAccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getConsolidationAccount()
    {
        return $this->container['consolidationAccount'];
    }

    /**
     * Sets consolidationAccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $consolidationAccount consolidationAccount
     *
     * @return $this
     */
    public function setConsolidationAccount($consolidationAccount)
    {
        $this->container['consolidationAccount'] = $consolidationAccount;

        return $this;
    }

    /**
     * Gets createdDateTime
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getCreatedDateTime()
    {
        return $this->container['createdDateTime'];
    }

    /**
     * Sets createdDateTime
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $createdDateTime createdDateTime
     *
     * @return $this
     */
    public function setCreatedDateTime($createdDateTime)
    {
        $this->container['createdDateTime'] = $createdDateTime;

        return $this;
    }

    /**
     * Gets currencyID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getCurrencyID()
    {
        return $this->container['currencyID'];
    }

    /**
     * Sets currencyID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $currencyID currencyID
     *
     * @return $this
     */
    public function setCurrencyID($currencyID)
    {
        $this->container['currencyID'] = $currencyID;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets lastModifiedDateTime
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['lastModifiedDateTime'];
    }

    /**
     * Sets lastModifiedDateTime
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\DateTimeValueModel $lastModifiedDateTime lastModifiedDateTime
     *
     * @return $this
     */
    public function setLastModifiedDateTime($lastModifiedDateTime)
    {
        $this->container['lastModifiedDateTime'] = $lastModifiedDateTime;

        return $this;
    }

    /**
     * Gets postOption
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getPostOption()
    {
        return $this->container['postOption'];
    }

    /**
     * Sets postOption
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $postOption postOption
     *
     * @return $this
     */
    public function setPostOption($postOption)
    {
        $this->container['postOption'] = $postOption;

        return $this;
    }

    /**
     * Gets requireUnits
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getRequireUnits()
    {
        return $this->container['requireUnits'];
    }

    /**
     * Sets requireUnits
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $requireUnits requireUnits
     *
     * @return $this
     */
    public function setRequireUnits($requireUnits)
    {
        $this->container['requireUnits'] = $requireUnits;

        return $this;
    }

    /**
     * Gets revaluationRateType
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getRevaluationRateType()
    {
        return $this->container['revaluationRateType'];
    }

    /**
     * Sets revaluationRateType
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $revaluationRateType revaluationRateType
     *
     * @return $this
     */
    public function setRevaluationRateType($revaluationRateType)
    {
        $this->container['revaluationRateType'] = $revaluationRateType;

        return $this;
    }

    /**
     * Gets secured
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getSecured()
    {
        return $this->container['secured'];
    }

    /**
     * Sets secured
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $secured secured
     *
     * @return $this
     */
    public function setSecured($secured)
    {
        $this->container['secured'] = $secured;

        return $this;
    }

    /**
     * Gets taxCategory
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getTaxCategory()
    {
        return $this->container['taxCategory'];
    }

    /**
     * Sets taxCategory
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $taxCategory taxCategory
     *
     * @return $this
     */
    public function setTaxCategory($taxCategory)
    {
        $this->container['taxCategory'] = $taxCategory;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets useDefaultSubaccount
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getUseDefaultSubaccount()
    {
        return $this->container['useDefaultSubaccount'];
    }

    /**
     * Sets useDefaultSubaccount
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $useDefaultSubaccount useDefaultSubaccount
     *
     * @return $this
     */
    public function setUseDefaultSubaccount($useDefaultSubaccount)
    {
        $this->container['useDefaultSubaccount'] = $useDefaultSubaccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


