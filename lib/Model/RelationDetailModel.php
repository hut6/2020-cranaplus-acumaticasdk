<?php
/**
 * RelationDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Model;
use \Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * RelationDetailModel Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelationDetailModel extends EntityModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RelationDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'addToCc' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'contactDisplayName' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'contactID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'document' => '\Hut6\CranaplusAcumaticaSdk\Model\GuidValueModel',
        'documentTargetNoteIDDescription' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'email' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'name' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'primary' => '\Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel',
        'relationID' => '\Hut6\CranaplusAcumaticaSdk\Model\IntValueModel',
        'role' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel',
        'type' => '\Hut6\CranaplusAcumaticaSdk\Model\StringValueModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => null,
        'addToCc' => null,
        'contactDisplayName' => null,
        'contactID' => null,
        'document' => null,
        'documentTargetNoteIDDescription' => null,
        'email' => null,
        'name' => null,
        'primary' => null,
        'relationID' => null,
        'role' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'Account',
        'addToCc' => 'AddToCc',
        'contactDisplayName' => 'ContactDisplayName',
        'contactID' => 'ContactID',
        'document' => 'Document',
        'documentTargetNoteIDDescription' => 'DocumentTargetNoteIDDescription',
        'email' => 'Email',
        'name' => 'Name',
        'primary' => 'Primary',
        'relationID' => 'RelationID',
        'role' => 'Role',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'addToCc' => 'setAddToCc',
        'contactDisplayName' => 'setContactDisplayName',
        'contactID' => 'setContactID',
        'document' => 'setDocument',
        'documentTargetNoteIDDescription' => 'setDocumentTargetNoteIDDescription',
        'email' => 'setEmail',
        'name' => 'setName',
        'primary' => 'setPrimary',
        'relationID' => 'setRelationID',
        'role' => 'setRole',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'addToCc' => 'getAddToCc',
        'contactDisplayName' => 'getContactDisplayName',
        'contactID' => 'getContactID',
        'document' => 'getDocument',
        'documentTargetNoteIDDescription' => 'getDocumentTargetNoteIDDescription',
        'email' => 'getEmail',
        'name' => 'getName',
        'primary' => 'getPrimary',
        'relationID' => 'getRelationID',
        'role' => 'getRole',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['addToCc'] = isset($data['addToCc']) ? $data['addToCc'] : null;
        $this->container['contactDisplayName'] = isset($data['contactDisplayName']) ? $data['contactDisplayName'] : null;
        $this->container['contactID'] = isset($data['contactID']) ? $data['contactID'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['documentTargetNoteIDDescription'] = isset($data['documentTargetNoteIDDescription']) ? $data['documentTargetNoteIDDescription'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['primary'] = isset($data['primary']) ? $data['primary'] : null;
        $this->container['relationID'] = isset($data['relationID']) ? $data['relationID'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets addToCc
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getAddToCc()
    {
        return $this->container['addToCc'];
    }

    /**
     * Sets addToCc
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $addToCc addToCc
     *
     * @return $this
     */
    public function setAddToCc($addToCc)
    {
        $this->container['addToCc'] = $addToCc;

        return $this;
    }

    /**
     * Gets contactDisplayName
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getContactDisplayName()
    {
        return $this->container['contactDisplayName'];
    }

    /**
     * Sets contactDisplayName
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $contactDisplayName contactDisplayName
     *
     * @return $this
     */
    public function setContactDisplayName($contactDisplayName)
    {
        $this->container['contactDisplayName'] = $contactDisplayName;

        return $this;
    }

    /**
     * Gets contactID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getContactID()
    {
        return $this->container['contactID'];
    }

    /**
     * Sets contactID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $contactID contactID
     *
     * @return $this
     */
    public function setContactID($contactID)
    {
        $this->container['contactID'] = $contactID;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\GuidValueModel
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\GuidValueModel $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets documentTargetNoteIDDescription
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getDocumentTargetNoteIDDescription()
    {
        return $this->container['documentTargetNoteIDDescription'];
    }

    /**
     * Sets documentTargetNoteIDDescription
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $documentTargetNoteIDDescription documentTargetNoteIDDescription
     *
     * @return $this
     */
    public function setDocumentTargetNoteIDDescription($documentTargetNoteIDDescription)
    {
        $this->container['documentTargetNoteIDDescription'] = $documentTargetNoteIDDescription;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\BooleanValueModel $primary primary
     *
     * @return $this
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets relationID
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel
     */
    public function getRelationID()
    {
        return $this->container['relationID'];
    }

    /**
     * Sets relationID
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\IntValueModel $relationID relationID
     *
     * @return $this
     */
    public function setRelationID($relationID)
    {
        $this->container['relationID'] = $relationID;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Hut6\CranaplusAcumaticaSdk\Model\StringValueModel $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


