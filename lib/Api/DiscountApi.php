<?php
/**
 * DiscountApi
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Hut6\CranaplusAcumaticaSdk\ApiException;
use Hut6\CranaplusAcumaticaSdk\Configuration;
use Hut6\CranaplusAcumaticaSdk\HeaderSelector;
use Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * DiscountApi Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation discountDeleteById
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function discountDeleteById($id)
    {
        $this->discountDeleteByIdWithHttpInfo($id);
    }

    /**
     * Operation discountDeleteByIdWithHttpInfo
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountDeleteByIdWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->discountDeleteByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountDeleteByIdAsync
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountDeleteByIdAsync($id)
    {
        return $this->discountDeleteByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountDeleteByIdAsyncWithHttpInfo
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountDeleteByIdAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->discountDeleteByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountDeleteById'
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountDeleteByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling discountDeleteById'
            );
        }

        $resourcePath = '/Discount/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountDeleteByKeys
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function discountDeleteByKeys($ids)
    {
        $this->discountDeleteByKeysWithHttpInfo($ids);
    }

    /**
     * Operation discountDeleteByKeysWithHttpInfo
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountDeleteByKeysWithHttpInfo($ids)
    {
        $returnType = '';
        $request = $this->discountDeleteByKeysRequest($ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountDeleteByKeysAsync
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountDeleteByKeysAsync($ids)
    {
        return $this->discountDeleteByKeysAsyncWithHttpInfo($ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountDeleteByKeysAsyncWithHttpInfo
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountDeleteByKeysAsyncWithHttpInfo($ids)
    {
        $returnType = '';
        $request = $this->discountDeleteByKeysRequest($ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountDeleteByKeys'
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountDeleteByKeysRequest($ids)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling discountDeleteByKeys'
            );
        }

        $resourcePath = '/Discount/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'pipes');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountGetAdHocSchema
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel
     */
    public function discountGetAdHocSchema()
    {
        list($response) = $this->discountGetAdHocSchemaWithHttpInfo();
        return $response;
    }

    /**
     * Operation discountGetAdHocSchemaWithHttpInfo
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountGetAdHocSchemaWithHttpInfo()
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountGetAdHocSchemaRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountGetAdHocSchemaAsync
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetAdHocSchemaAsync()
    {
        return $this->discountGetAdHocSchemaAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountGetAdHocSchemaAsyncWithHttpInfo
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetAdHocSchemaAsyncWithHttpInfo()
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountGetAdHocSchemaRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountGetAdHocSchema'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountGetAdHocSchemaRequest()
    {

        $resourcePath = '/Discount/$adHocSchema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountGetById
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel
     */
    public function discountGetById($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        list($response) = $this->discountGetByIdWithHttpInfo($id, $select, $filter, $expand, $custom);
        return $response;
    }

    /**
     * Operation discountGetByIdWithHttpInfo
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountGetByIdWithHttpInfo($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountGetByIdRequest($id, $select, $filter, $expand, $custom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountGetByIdAsync
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetByIdAsync($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        return $this->discountGetByIdAsyncWithHttpInfo($id, $select, $filter, $expand, $custom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountGetByIdAsyncWithHttpInfo
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetByIdAsyncWithHttpInfo($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountGetByIdRequest($id, $select, $filter, $expand, $custom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountGetById'
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountGetByIdRequest($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling discountGetById'
            );
        }

        $resourcePath = '/Discount/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountGetByKeys
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel
     */
    public function discountGetByKeys($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        list($response) = $this->discountGetByKeysWithHttpInfo($ids, $select, $filter, $expand, $custom);
        return $response;
    }

    /**
     * Operation discountGetByKeysWithHttpInfo
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountGetByKeysWithHttpInfo($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountGetByKeysRequest($ids, $select, $filter, $expand, $custom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountGetByKeysAsync
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetByKeysAsync($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        return $this->discountGetByKeysAsyncWithHttpInfo($ids, $select, $filter, $expand, $custom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountGetByKeysAsyncWithHttpInfo
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetByKeysAsyncWithHttpInfo($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountGetByKeysRequest($ids, $select, $filter, $expand, $custom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountGetByKeys'
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountGetByKeysRequest($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling discountGetByKeys'
            );
        }

        $resourcePath = '/Discount/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }

        // path params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'pipes');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountGetList
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel[]
     */
    public function discountGetList($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        list($response) = $this->discountGetListWithHttpInfo($select, $filter, $expand, $custom, $skip, $top);
        return $response;
    }

    /**
     * Operation discountGetListWithHttpInfo
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function discountGetListWithHttpInfo($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel[]';
        $request = $this->discountGetListRequest($select, $filter, $expand, $custom, $skip, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountGetListAsync
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetListAsync($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        return $this->discountGetListAsyncWithHttpInfo($select, $filter, $expand, $custom, $skip, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountGetListAsyncWithHttpInfo
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetListAsyncWithHttpInfo($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel[]';
        $request = $this->discountGetListRequest($select, $filter, $expand, $custom, $skip, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountGetList'
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountGetListRequest($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {

        $resourcePath = '/Discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountInvokeActionUpdateDiscounts
     *
     * Performs an action in the system.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\UpdateDiscountsModel $invocation The record to which the action should be applied and the parameters of the action. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function discountInvokeActionUpdateDiscounts($invocation)
    {
        $this->discountInvokeActionUpdateDiscountsWithHttpInfo($invocation);
    }

    /**
     * Operation discountInvokeActionUpdateDiscountsWithHttpInfo
     *
     * Performs an action in the system.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\UpdateDiscountsModel $invocation The record to which the action should be applied and the parameters of the action. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountInvokeActionUpdateDiscountsWithHttpInfo($invocation)
    {
        $returnType = '';
        $request = $this->discountInvokeActionUpdateDiscountsRequest($invocation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountInvokeActionUpdateDiscountsAsync
     *
     * Performs an action in the system.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\UpdateDiscountsModel $invocation The record to which the action should be applied and the parameters of the action. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountInvokeActionUpdateDiscountsAsync($invocation)
    {
        return $this->discountInvokeActionUpdateDiscountsAsyncWithHttpInfo($invocation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountInvokeActionUpdateDiscountsAsyncWithHttpInfo
     *
     * Performs an action in the system.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\UpdateDiscountsModel $invocation The record to which the action should be applied and the parameters of the action. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountInvokeActionUpdateDiscountsAsyncWithHttpInfo($invocation)
    {
        $returnType = '';
        $request = $this->discountInvokeActionUpdateDiscountsRequest($invocation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountInvokeActionUpdateDiscounts'
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\UpdateDiscountsModel $invocation The record to which the action should be applied and the parameters of the action. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountInvokeActionUpdateDiscountsRequest($invocation)
    {
        // verify the required parameter 'invocation' is set
        if ($invocation === null || (is_array($invocation) && count($invocation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invocation when calling discountInvokeActionUpdateDiscounts'
            );
        }

        $resourcePath = '/Discount/UpdateDiscounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($invocation)) {
            $_tempBody = $invocation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountPutEntity
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel
     */
    public function discountPutEntity($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        list($response) = $this->discountPutEntityWithHttpInfo($entity, $select, $filter, $expand, $custom);
        return $response;
    }

    /**
     * Operation discountPutEntityWithHttpInfo
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountPutEntityWithHttpInfo($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountPutEntityRequest($entity, $select, $filter, $expand, $custom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountPutEntityAsync
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPutEntityAsync($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        return $this->discountPutEntityAsyncWithHttpInfo($entity, $select, $filter, $expand, $custom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountPutEntityAsyncWithHttpInfo
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPutEntityAsyncWithHttpInfo($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\DiscountModel';
        $request = $this->discountPutEntityRequest($entity, $select, $filter, $expand, $custom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountPutEntity'
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\DiscountModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountPutEntityRequest($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        // verify the required parameter 'entity' is set
        if ($entity === null || (is_array($entity) && count($entity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity when calling discountPutEntity'
            );
        }

        $resourcePath = '/Discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }


        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountPutFile
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function discountPutFile($ids, $filename)
    {
        $this->discountPutFileWithHttpInfo($ids, $filename);
    }

    /**
     * Operation discountPutFileWithHttpInfo
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountPutFileWithHttpInfo($ids, $filename)
    {
        $returnType = '';
        $request = $this->discountPutFileRequest($ids, $filename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountPutFileAsync
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPutFileAsync($ids, $filename)
    {
        return $this->discountPutFileAsyncWithHttpInfo($ids, $filename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountPutFileAsyncWithHttpInfo
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPutFileAsyncWithHttpInfo($ids, $filename)
    {
        $returnType = '';
        $request = $this->discountPutFileRequest($ids, $filename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountPutFile'
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountPutFileRequest($ids, $filename)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling discountPutFile'
            );
        }
        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filename when calling discountPutFile'
            );
        }

        $resourcePath = '/Discount/{ids}/files/{filename}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'pipes');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }
        // path params
        if ($filename !== null) {
            $resourcePath = str_replace(
                '{' . 'filename' . '}',
                ObjectSerializer::toPathValue($filename),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
