<?php
/**
 * EntitlementSummaryApi
 * PHP version 5
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crana/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hut6\CranaplusAcumaticaSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Hut6\CranaplusAcumaticaSdk\ApiException;
use Hut6\CranaplusAcumaticaSdk\Configuration;
use Hut6\CranaplusAcumaticaSdk\HeaderSelector;
use Hut6\CranaplusAcumaticaSdk\ObjectSerializer;

/**
 * EntitlementSummaryApi Class Doc Comment
 *
 * @category Class
 * @package  Hut6\CranaplusAcumaticaSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EntitlementSummaryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation entitlementSummaryDeleteById
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function entitlementSummaryDeleteById($id)
    {
        $this->entitlementSummaryDeleteByIdWithHttpInfo($id);
    }

    /**
     * Operation entitlementSummaryDeleteByIdWithHttpInfo
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryDeleteByIdWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->entitlementSummaryDeleteByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryDeleteByIdAsync
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryDeleteByIdAsync($id)
    {
        return $this->entitlementSummaryDeleteByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryDeleteByIdAsyncWithHttpInfo
     *
     * Deletes the record by its session identifier.
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryDeleteByIdAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->entitlementSummaryDeleteByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryDeleteById'
     *
     * @param  string $id The session ID of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryDeleteByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling entitlementSummaryDeleteById'
            );
        }

        $resourcePath = '/EntitlementSummary/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entitlementSummaryDeleteByKeys
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function entitlementSummaryDeleteByKeys($ids)
    {
        $this->entitlementSummaryDeleteByKeysWithHttpInfo($ids);
    }

    /**
     * Operation entitlementSummaryDeleteByKeysWithHttpInfo
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryDeleteByKeysWithHttpInfo($ids)
    {
        $returnType = '';
        $request = $this->entitlementSummaryDeleteByKeysRequest($ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryDeleteByKeysAsync
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryDeleteByKeysAsync($ids)
    {
        return $this->entitlementSummaryDeleteByKeysAsyncWithHttpInfo($ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryDeleteByKeysAsyncWithHttpInfo
     *
     * Deletes the record by the values of its key fields.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryDeleteByKeysAsyncWithHttpInfo($ids)
    {
        $returnType = '';
        $request = $this->entitlementSummaryDeleteByKeysRequest($ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryDeleteByKeys'
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryDeleteByKeysRequest($ids)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling entitlementSummaryDeleteByKeys'
            );
        }

        $resourcePath = '/EntitlementSummary/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'pipes');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entitlementSummaryGetAdHocSchema
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel
     */
    public function entitlementSummaryGetAdHocSchema()
    {
        list($response) = $this->entitlementSummaryGetAdHocSchemaWithHttpInfo();
        return $response;
    }

    /**
     * Operation entitlementSummaryGetAdHocSchemaWithHttpInfo
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryGetAdHocSchemaWithHttpInfo()
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryGetAdHocSchemaRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryGetAdHocSchemaAsync
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetAdHocSchemaAsync()
    {
        return $this->entitlementSummaryGetAdHocSchemaAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryGetAdHocSchemaAsyncWithHttpInfo
     *
     * Retrieves the schema of custom fields of the entity from the system.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetAdHocSchemaAsyncWithHttpInfo()
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryGetAdHocSchemaRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryGetAdHocSchema'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryGetAdHocSchemaRequest()
    {

        $resourcePath = '/EntitlementSummary/$adHocSchema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entitlementSummaryGetById
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel
     */
    public function entitlementSummaryGetById($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        list($response) = $this->entitlementSummaryGetByIdWithHttpInfo($id, $select, $filter, $expand, $custom);
        return $response;
    }

    /**
     * Operation entitlementSummaryGetByIdWithHttpInfo
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryGetByIdWithHttpInfo($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryGetByIdRequest($id, $select, $filter, $expand, $custom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryGetByIdAsync
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetByIdAsync($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        return $this->entitlementSummaryGetByIdAsyncWithHttpInfo($id, $select, $filter, $expand, $custom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryGetByIdAsyncWithHttpInfo
     *
     * Retrieves a record by the value of the session entity ID from the system.
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetByIdAsyncWithHttpInfo($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryGetByIdRequest($id, $select, $filter, $expand, $custom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryGetById'
     *
     * @param  string $id The session ID of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryGetByIdRequest($id, $select = null, $filter = null, $expand = null, $custom = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling entitlementSummaryGetById'
            );
        }

        $resourcePath = '/EntitlementSummary/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entitlementSummaryGetByKeys
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel
     */
    public function entitlementSummaryGetByKeys($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        list($response) = $this->entitlementSummaryGetByKeysWithHttpInfo($ids, $select, $filter, $expand, $custom);
        return $response;
    }

    /**
     * Operation entitlementSummaryGetByKeysWithHttpInfo
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryGetByKeysWithHttpInfo($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryGetByKeysRequest($ids, $select, $filter, $expand, $custom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryGetByKeysAsync
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetByKeysAsync($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        return $this->entitlementSummaryGetByKeysAsyncWithHttpInfo($ids, $select, $filter, $expand, $custom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryGetByKeysAsyncWithHttpInfo
     *
     * Retrieves a record by the values of its key fields from the system.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetByKeysAsyncWithHttpInfo($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryGetByKeysRequest($ids, $select, $filter, $expand, $custom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryGetByKeys'
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryGetByKeysRequest($ids, $select = null, $filter = null, $expand = null, $custom = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling entitlementSummaryGetByKeys'
            );
        }

        $resourcePath = '/EntitlementSummary/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }

        // path params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'pipes');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entitlementSummaryGetList
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel[]
     */
    public function entitlementSummaryGetList($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        list($response) = $this->entitlementSummaryGetListWithHttpInfo($select, $filter, $expand, $custom, $skip, $top);
        return $response;
    }

    /**
     * Operation entitlementSummaryGetListWithHttpInfo
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryGetListWithHttpInfo($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel[]';
        $request = $this->entitlementSummaryGetListRequest($select, $filter, $expand, $custom, $skip, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryGetListAsync
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetListAsync($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        return $this->entitlementSummaryGetListAsyncWithHttpInfo($select, $filter, $expand, $custom, $skip, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryGetListAsyncWithHttpInfo
     *
     * Retrieves records that satisfy the specified conditions from the system.
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryGetListAsyncWithHttpInfo($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel[]';
        $request = $this->entitlementSummaryGetListRequest($select, $filter, $expand, $custom, $skip, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryGetList'
     *
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     * @param  int $skip The number of records to be skipped from the list of returned records. (optional)
     * @param  int $top The number of records to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryGetListRequest($select = null, $filter = null, $expand = null, $custom = null, $skip = null, $top = null)
    {

        $resourcePath = '/EntitlementSummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entitlementSummaryPutEntity
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel
     */
    public function entitlementSummaryPutEntity($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        list($response) = $this->entitlementSummaryPutEntityWithHttpInfo($entity, $select, $filter, $expand, $custom);
        return $response;
    }

    /**
     * Operation entitlementSummaryPutEntityWithHttpInfo
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryPutEntityWithHttpInfo($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryPutEntityRequest($entity, $select, $filter, $expand, $custom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryPutEntityAsync
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryPutEntityAsync($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        return $this->entitlementSummaryPutEntityAsyncWithHttpInfo($entity, $select, $filter, $expand, $custom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryPutEntityAsyncWithHttpInfo
     *
     * Creates a record or updates an existing record.
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryPutEntityAsyncWithHttpInfo($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        $returnType = '\Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel';
        $request = $this->entitlementSummaryPutEntityRequest($entity, $select, $filter, $expand, $custom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryPutEntity'
     *
     * @param  \Hut6\CranaplusAcumaticaSdk\Model\EntitlementSummaryModel $entity The record to be passed to the system. (required)
     * @param  string $select The fields of the entity to be returned from the system. (optional)
     * @param  string $filter The conditions that determine which records should be selected from the system. (optional)
     * @param  string $expand The linked and detail entities that should be expanded. (optional)
     * @param  string $custom The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryPutEntityRequest($entity, $select = null, $filter = null, $expand = null, $custom = null)
    {
        // verify the required parameter 'entity' is set
        if ($entity === null || (is_array($entity) && count($entity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity when calling entitlementSummaryPutEntity'
            );
        }

        $resourcePath = '/EntitlementSummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($custom !== null) {
            $queryParams['$custom'] = ObjectSerializer::toQueryValue($custom);
        }


        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entitlementSummaryPutFile
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function entitlementSummaryPutFile($ids, $filename)
    {
        $this->entitlementSummaryPutFileWithHttpInfo($ids, $filename);
    }

    /**
     * Operation entitlementSummaryPutFileWithHttpInfo
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \Hut6\CranaplusAcumaticaSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitlementSummaryPutFileWithHttpInfo($ids, $filename)
    {
        $returnType = '';
        $request = $this->entitlementSummaryPutFileRequest($ids, $filename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Hut6\CranaplusAcumaticaSdk\Model\HttpErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation entitlementSummaryPutFileAsync
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryPutFileAsync($ids, $filename)
    {
        return $this->entitlementSummaryPutFileAsyncWithHttpInfo($ids, $filename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitlementSummaryPutFileAsyncWithHttpInfo
     *
     * Attaches a file to a record.
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitlementSummaryPutFileAsyncWithHttpInfo($ids, $filename)
    {
        $returnType = '';
        $request = $this->entitlementSummaryPutFileRequest($ids, $filename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitlementSummaryPutFile'
     *
     * @param  string[] $ids The values of the key fields of the record. (required)
     * @param  string $filename The name of the file that you are going to attach with the extension. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitlementSummaryPutFileRequest($ids, $filename)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling entitlementSummaryPutFile'
            );
        }
        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filename when calling entitlementSummaryPutFile'
            );
        }

        $resourcePath = '/EntitlementSummary/{ids}/files/{filename}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'pipes');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }
        // path params
        if ($filename !== null) {
            $resourcePath = str_replace(
                '{' . 'filename' . '}',
                ObjectSerializer::toPathValue($filename),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
